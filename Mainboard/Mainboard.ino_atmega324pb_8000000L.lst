
C:\Users\User\AppData\Local\Temp\arduino_build_132210/Mainboard.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:65
       0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
../../../../crt1/gcrt1.S:67
       4:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:68
       8:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:69
       c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:70
      10:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:71
      14:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:72
      18:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:73
      1c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:74
      20:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:75
      24:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:76
      28:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:77
      2c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:78
      30:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:79
      34:	0c 94 aa 04 	jmp	0x954	; 0x954 <__vector_13>
../../../../crt1/gcrt1.S:80
      38:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:81
      3c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:82
      40:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:83
      44:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:84
      48:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__vector_18>
../../../../crt1/gcrt1.S:85
      4c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:86
      50:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__vector_20>
../../../../crt1/gcrt1.S:87
      54:	0c 94 08 04 	jmp	0x810	; 0x810 <__vector_21>
../../../../crt1/gcrt1.S:88
      58:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:89
      5c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:90
      60:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:91
      64:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:92
      68:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:93
      6c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:94
      70:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__vector_28>
../../../../crt1/gcrt1.S:95
      74:	0c 94 b0 03 	jmp	0x760	; 0x760 <__vector_29>
../../../../crt1/gcrt1.S:96
      78:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:97
      7c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:98
      80:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:99
      84:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:100
      88:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:101
      8c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:102
      90:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:103
      94:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:104
      98:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:105
      9c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:106
      a0:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:107
      a4:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:108
      a8:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:109
      ac:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:110
      b0:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:111
      b4:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:112
      b8:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:113
      bc:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:114
      c0:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:115
      c4:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>
../../../../crt1/gcrt1.S:116
      c8:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__bad_interrupt>

000000cc <__trampolines_end>:
__trampolines_start():
      cc:	00 00       	nop
      ce:	21 00       	.word	0x0021	; ????
      d0:	24 00       	.word	0x0024	; ????
      d2:	27 00       	.word	0x0027	; ????
      d4:	2a 00       	.word	0x002a	; ????
      d6:	2d 00       	.word	0x002d	; ????

000000d8 <port_to_output_PGM>:
      d8:	00 00 22 00 25 00 28 00 2b 00 2e 00                 ..".%.(.+...

000000e4 <port_to_input_PGM>:
      e4:	00 00 20 00 23 00 26 00 29 00 2c 00                 .. .#.&.).,.

000000f0 <digital_pin_to_port_PGM>:
      f0:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     100:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................
     110:	05 05 05 05 05 05 05                                .......

00000117 <digital_pin_to_bit_mask_PGM>:
     117:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     127:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     137:	01 02 04 08 10 20 40                                ..... @

0000013e <digital_pin_to_timer_PGM>:
     13e:	00 00 00 02 03 00 0a 0b 00 00 00 00 05 04 09 08     ................
     14e:	00 00 00 00 0d 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000166 <__ctors_start>:
__ctors_start():
     166:	66 05       	cpc	r22, r6

00000168 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     168:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     16a:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     16c:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:241
     16e:	d8 e0       	ldi	r29, 0x08	; 8
../../../../crt1/gcrt1.S:242
     170:	de bf       	out	0x3e, r29	; 62
../../../../crt1/gcrt1.S:244
     172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     174:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     176:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     178:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     17a:	e2 e3       	ldi	r30, 0x32	; 50
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     17c:	f7 e1       	ldi	r31, 0x17	; 23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     17e:	02 c0       	rjmp	.+4      	; 0x184 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     180:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     182:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     184:	ac 33       	cpi	r26, 0x3C	; 60
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     186:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     188:	d9 f7       	brne	.-10     	; 0x180 <__do_copy_data+0xc>

0000018a <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     18a:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     18c:	ac e3       	ldi	r26, 0x3C	; 60
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     18e:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     194:	aa 3b       	cpi	r26, 0xBA	; 186
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     196:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>

0000019a <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     19a:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     19c:	c4 eb       	ldi	r28, 0xB4	; 180
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     19e:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     1a2:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     1a4:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     1a6:	0e 94 91 0b 	call	0x1722	; 0x1722 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     1aa:	c3 3b       	cpi	r28, 0xB3	; 179
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     1ac:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     1ae:	c9 f7       	brne	.-14     	; 0x1a2 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     1b0:	0e 94 0e 06 	call	0xc1c	; 0xc1c <main>
../../../../crt1/gcrt1.S:315
     1b4:	0c 94 97 0b 	jmp	0x172e	; 0x172e <_exit>

000001b8 <__bad_interrupt>:
__vector_38():
../../../../crt1/gcrt1.S:209
     1b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001bc <delayMicroseconds.constprop.16>:
delayMicroseconds():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:761
              // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 8000000L
  // for the 8 MHz clock
  __asm__ __volatile__ (
     1bc:	00 00       	nop
     1be:	00 00       	nop
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     1c0:	85 e0       	ldi	r24, 0x05	; 5
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	01 97       	sbiw	r24, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <delayMicroseconds.constprop.16+0x8>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     1c8:	08 95       	ret

000001ca <Servo::write(int) [clone .constprop.11]>:
write():
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:264
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}

void Servo::write(int value)
     1ca:	cf 92       	push	r12
     1cc:	df 92       	push	r13
     1ce:	ef 92       	push	r14
     1d0:	ff 92       	push	r15
     1d2:	1f 93       	push	r17
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
writeMicroseconds():
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:278
}

void Servo::writeMicroseconds(int value)
{
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
     1d8:	10 91 b7 02 	lds	r17, 0x02B7	; 0x8002b7 <linearMotor>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:279
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
     1dc:	1c 30       	cpi	r17, 0x0C	; 12
     1de:	08 f0       	brcs	.+2      	; 0x1e2 <Servo::write(int) [clone .constprop.11]+0x18>
     1e0:	47 c0       	rjmp	.+142    	; 0x270 <Servo::write(int) [clone .constprop.11]+0xa6>
write():
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:270
{
  if(value < MIN_PULSE_WIDTH)
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
     1e2:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <linearMotor+0x1>
     1e6:	c8 e8       	ldi	r28, 0x88	; 136
     1e8:	d0 e0       	ldi	r29, 0x00	; 0
     1ea:	c8 1b       	sub	r28, r24
     1ec:	d1 09       	sbc	r29, r1
     1ee:	87 fd       	sbrc	r24, 7
     1f0:	d3 95       	inc	r29
     1f2:	cc 0f       	add	r28, r28
     1f4:	dd 1f       	adc	r29, r29
     1f6:	cc 0f       	add	r28, r28
     1f8:	dd 1f       	adc	r29, r29
     1fa:	6e 01       	movw	r12, r28
     1fc:	0d 2e       	mov	r0, r29
     1fe:	00 0c       	add	r0, r0
     200:	ee 08       	sbc	r14, r14
     202:	ff 08       	sbc	r15, r15
     204:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <linearMotor+0x2>
     208:	28 e5       	ldi	r18, 0x58	; 88
     20a:	32 e0       	ldi	r19, 0x02	; 2
     20c:	28 1b       	sub	r18, r24
     20e:	31 09       	sbc	r19, r1
     210:	87 fd       	sbrc	r24, 7
     212:	33 95       	inc	r19
     214:	22 0f       	add	r18, r18
     216:	33 1f       	adc	r19, r19
     218:	22 0f       	add	r18, r18
     21a:	33 1f       	adc	r19, r19
     21c:	03 2e       	mov	r0, r19
     21e:	00 0c       	add	r0, r0
     220:	44 0b       	sbc	r20, r20
     222:	55 0b       	sbc	r21, r21
map():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/WMath.cpp:54
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     224:	2c 19       	sub	r18, r12
     226:	3d 09       	sbc	r19, r13
     228:	4e 09       	sbc	r20, r14
     22a:	5f 09       	sbc	r21, r15
     22c:	a2 e3       	ldi	r26, 0x32	; 50
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	0e 94 39 09 	call	0x1272	; 0x1272 <__muluhisi3>
     234:	24 eb       	ldi	r18, 0xB4	; 180
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	0e 94 1a 09 	call	0x1234	; 0x1234 <__divmodsi4>
     240:	2c 0d       	add	r18, r12
     242:	3d 1d       	adc	r19, r13
     244:	4e 1d       	adc	r20, r14
     246:	5f 1d       	adc	r21, r15
     248:	2c 17       	cp	r18, r28
     24a:	3d 07       	cpc	r19, r29
     24c:	0c f4       	brge	.+2      	; 0x250 <Servo::write(int) [clone .constprop.11]+0x86>
     24e:	9e 01       	movw	r18, r28
writeMicroseconds():
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:289
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009

    uint8_t oldSREG = SREG;
     250:	4f b7       	in	r20, 0x3f	; 63
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:290
    cli();
     252:	f8 94       	cli
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:291
    servos[channel].ticks = value;
     254:	81 2f       	mov	r24, r17
     256:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:286
    if( value < SERVO_MIN() )          // ensure pulse width is valid
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
     258:	22 50       	subi	r18, 0x02	; 2
     25a:	31 09       	sbc	r19, r1
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:291
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009

    uint8_t oldSREG = SREG;
    cli();
    servos[channel].ticks = value;
     25c:	fc 01       	movw	r30, r24
     25e:	ee 0f       	add	r30, r30
     260:	ff 1f       	adc	r31, r31
     262:	e8 0f       	add	r30, r24
     264:	f9 1f       	adc	r31, r25
     266:	e0 57       	subi	r30, 0x70	; 112
     268:	fd 4f       	sbci	r31, 0xFD	; 253
     26a:	32 83       	std	Z+2, r19	; 0x02
     26c:	21 83       	std	Z+1, r18	; 0x01
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:292
    SREG = oldSREG;
     26e:	4f bf       	out	0x3f, r20	; 63
write():
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:273
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
  }
  this->writeMicroseconds(value);
}
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	1f 91       	pop	r17
     276:	ff 90       	pop	r15
     278:	ef 90       	pop	r14
     27a:	df 90       	pop	r13
     27c:	cf 90       	pop	r12
     27e:	08 95       	ret

00000280 <Print::write(unsigned char const*, unsigned int)>:
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     280:	af 92       	push	r10
     282:	bf 92       	push	r11
     284:	cf 92       	push	r12
     286:	df 92       	push	r13
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	6c 01       	movw	r12, r24
     296:	7b 01       	movw	r14, r22
     298:	8b 01       	movw	r16, r22
     29a:	04 0f       	add	r16, r20
     29c:	15 1f       	adc	r17, r21
     29e:	eb 01       	movw	r28, r22
     2a0:	5e 01       	movw	r10, r28
     2a2:	ae 18       	sub	r10, r14
     2a4:	bf 08       	sbc	r11, r15
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     2a6:	c0 17       	cp	r28, r16
     2a8:	d1 07       	cpc	r29, r17
     2aa:	59 f0       	breq	.+22     	; 0x2c2 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     2ac:	69 91       	ld	r22, Y+
     2ae:	d6 01       	movw	r26, r12
     2b0:	ed 91       	ld	r30, X+
     2b2:	fc 91       	ld	r31, X
     2b4:	01 90       	ld	r0, Z+
     2b6:	f0 81       	ld	r31, Z
     2b8:	e0 2d       	mov	r30, r0
     2ba:	c6 01       	movw	r24, r12
     2bc:	09 95       	icall
     2be:	89 2b       	or	r24, r25
     2c0:	79 f7       	brne	.-34     	; 0x2a0 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     2c2:	c5 01       	movw	r24, r10
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	ff 90       	pop	r15
     2ce:	ef 90       	pop	r14
     2d0:	df 90       	pop	r13
     2d2:	cf 90       	pop	r12
     2d4:	bf 90       	pop	r11
     2d6:	af 90       	pop	r10
     2d8:	08 95       	ret

000002da <HardwareSerial::availableForWrite()>:
availableForWrite():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     2da:	fc 01       	movw	r30, r24
     2dc:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     2de:	44 8d       	ldd	r20, Z+28	; 0x1c
     2e0:	25 2f       	mov	r18, r21
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	84 2f       	mov	r24, r20
     2e6:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     2e8:	82 1b       	sub	r24, r18
     2ea:	93 0b       	sbc	r25, r19
     2ec:	54 17       	cp	r21, r20
     2ee:	10 f0       	brcs	.+4      	; 0x2f4 <HardwareSerial::availableForWrite()+0x1a>
     2f0:	cf 96       	adiw	r24, 0x3f	; 63
     2f2:	08 95       	ret
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     2f4:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     2f6:	08 95       	ret

000002f8 <HardwareSerial::read()>:
read():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     2f8:	fc 01       	movw	r30, r24
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     2fa:	91 8d       	ldd	r25, Z+25	; 0x19
     2fc:	82 8d       	ldd	r24, Z+26	; 0x1a
     2fe:	98 17       	cp	r25, r24
     300:	61 f0       	breq	.+24     	; 0x31a <HardwareSerial::read()+0x22>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     302:	a2 8d       	ldd	r26, Z+26	; 0x1a
     304:	ae 0f       	add	r26, r30
     306:	bf 2f       	mov	r27, r31
     308:	b1 1d       	adc	r27, r1
     30a:	5d 96       	adiw	r26, 0x1d	; 29
     30c:	8c 91       	ld	r24, X
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     30e:	92 8d       	ldd	r25, Z+26	; 0x1a
     310:	9f 5f       	subi	r25, 0xFF	; 255
     312:	9f 73       	andi	r25, 0x3F	; 63
     314:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	08 95       	ret
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     31e:	08 95       	ret

00000320 <HardwareSerial::peek()>:
peek():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     320:	fc 01       	movw	r30, r24
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     322:	91 8d       	ldd	r25, Z+25	; 0x19
     324:	82 8d       	ldd	r24, Z+26	; 0x1a
     326:	98 17       	cp	r25, r24
     328:	31 f0       	breq	.+12     	; 0x336 <HardwareSerial::peek()+0x16>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     32a:	82 8d       	ldd	r24, Z+26	; 0x1a
     32c:	e8 0f       	add	r30, r24
     32e:	f1 1d       	adc	r31, r1
     330:	85 8d       	ldd	r24, Z+29	; 0x1d
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	08 95       	ret
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     336:	8f ef       	ldi	r24, 0xFF	; 255
     338:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     33a:	08 95       	ret

0000033c <HardwareSerial::available()>:
available():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     33c:	fc 01       	movw	r30, r24
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     33e:	91 8d       	ldd	r25, Z+25	; 0x19
     340:	22 8d       	ldd	r18, Z+26	; 0x1a
     342:	89 2f       	mov	r24, r25
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	80 5c       	subi	r24, 0xC0	; 192
     348:	9f 4f       	sbci	r25, 0xFF	; 255
     34a:	82 1b       	sub	r24, r18
     34c:	91 09       	sbc	r25, r1
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     34e:	8f 73       	andi	r24, 0x3F	; 63
     350:	99 27       	eor	r25, r25
     352:	08 95       	ret

00000354 <Serial1_available()>:
Serial1_available():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:68
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
     354:	82 e5       	ldi	r24, 0x52	; 82
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	0e 94 9e 01 	call	0x33c	; 0x33c <HardwareSerial::available()>
     35c:	21 e0       	ldi	r18, 0x01	; 1
     35e:	89 2b       	or	r24, r25
     360:	09 f4       	brne	.+2      	; 0x364 <Serial1_available()+0x10>
     362:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
}
     364:	82 2f       	mov	r24, r18
     366:	08 95       	ret

00000368 <Serial0_available()>:
Serial0_available():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     368:	8f ee       	ldi	r24, 0xEF	; 239
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	0e 94 9e 01 	call	0x33c	; 0x33c <HardwareSerial::available()>
     370:	21 e0       	ldi	r18, 0x01	; 1
     372:	89 2b       	or	r24, r25
     374:	09 f4       	brne	.+2      	; 0x378 <Serial0_available()+0x10>
     376:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     378:	82 2f       	mov	r24, r18
     37a:	08 95       	ret

0000037c <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     37c:	fc 01       	movw	r30, r24
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     37e:	a4 8d       	ldd	r26, Z+28	; 0x1c
     380:	a8 0f       	add	r26, r24
     382:	b9 2f       	mov	r27, r25
     384:	b1 1d       	adc	r27, r1
     386:	a3 5a       	subi	r26, 0xA3	; 163
     388:	bf 4f       	sbci	r27, 0xFF	; 255
     38a:	2c 91       	ld	r18, X
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     38c:	84 8d       	ldd	r24, Z+28	; 0x1c
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	8f 73       	andi	r24, 0x3F	; 63
     394:	99 27       	eor	r25, r25
     396:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     398:	a6 89       	ldd	r26, Z+22	; 0x16
     39a:	b7 89       	ldd	r27, Z+23	; 0x17
     39c:	2c 93       	st	X, r18
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     39e:	a0 89       	ldd	r26, Z+16	; 0x10
     3a0:	b1 89       	ldd	r27, Z+17	; 0x11
     3a2:	8c 91       	ld	r24, X
     3a4:	83 70       	andi	r24, 0x03	; 3
     3a6:	80 64       	ori	r24, 0x40	; 64
     3a8:	8c 93       	st	X, r24
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     3aa:	93 8d       	ldd	r25, Z+27	; 0x1b
     3ac:	84 8d       	ldd	r24, Z+28	; 0x1c
     3ae:	98 13       	cpse	r25, r24
     3b0:	06 c0       	rjmp	.+12     	; 0x3be <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     3b2:	02 88       	ldd	r0, Z+18	; 0x12
     3b4:	f3 89       	ldd	r31, Z+19	; 0x13
     3b6:	e0 2d       	mov	r30, r0
     3b8:	80 81       	ld	r24, Z
     3ba:	8f 7d       	andi	r24, 0xDF	; 223
     3bc:	80 83       	st	Z, r24
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     3be:	08 95       	ret

000003c0 <HardwareSerial::write(unsigned char)>:
write():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	ec 01       	movw	r28, r24
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     3d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     3d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3d6:	98 13       	cpse	r25, r24
     3d8:	1a c0       	rjmp	.+52     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     3da:	e8 89       	ldd	r30, Y+16	; 0x10
     3dc:	f9 89       	ldd	r31, Y+17	; 0x11
     3de:	80 81       	ld	r24, Z
     3e0:	85 ff       	sbrs	r24, 5
     3e2:	15 c0       	rjmp	.+42     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     3e4:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\user\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3e6:	f8 94       	cli
write():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     3e8:	ee 89       	ldd	r30, Y+22	; 0x16
     3ea:	ff 89       	ldd	r31, Y+23	; 0x17
     3ec:	60 83       	st	Z, r22
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     3ee:	e8 89       	ldd	r30, Y+16	; 0x10
     3f0:	f9 89       	ldd	r31, Y+17	; 0x11
     3f2:	80 81       	ld	r24, Z
     3f4:	83 70       	andi	r24, 0x03	; 3
     3f6:	80 64       	ori	r24, 0x40	; 64
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     3f8:	80 83       	st	Z, r24
__iRestore():
c:\users\user\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3fa:	9f bf       	out	0x3f, r25	; 63
write():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	08 95       	ret
     40e:	f6 2e       	mov	r15, r22
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     410:	0b 8d       	ldd	r16, Y+27	; 0x1b
     412:	10 e0       	ldi	r17, 0x00	; 0
     414:	0f 5f       	subi	r16, 0xFF	; 255
     416:	1f 4f       	sbci	r17, 0xFF	; 255
     418:	0f 73       	andi	r16, 0x3F	; 63
     41a:	11 27       	eor	r17, r17
     41c:	e0 2e       	mov	r14, r16
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     41e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     420:	8e 11       	cpse	r24, r14
     422:	0c c0       	rjmp	.+24     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	07 fc       	sbrc	r0, 7
     428:	fa cf       	rjmp	.-12     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     42a:	e8 89       	ldd	r30, Y+16	; 0x10
     42c:	f9 89       	ldd	r31, Y+17	; 0x11
     42e:	80 81       	ld	r24, Z
     430:	85 ff       	sbrs	r24, 5
     432:	f5 cf       	rjmp	.-22     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     434:	ce 01       	movw	r24, r28
     436:	0e 94 be 01 	call	0x37c	; 0x37c <HardwareSerial::_tx_udr_empty_irq()>
     43a:	f1 cf       	rjmp	.-30     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     43c:	eb 8d       	ldd	r30, Y+27	; 0x1b
     43e:	ec 0f       	add	r30, r28
     440:	fd 2f       	mov	r31, r29
     442:	f1 1d       	adc	r31, r1
     444:	e3 5a       	subi	r30, 0xA3	; 163
     446:	ff 4f       	sbci	r31, 0xFF	; 255
     448:	f0 82       	st	Z, r15
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     44a:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\user\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     44c:	f8 94       	cli
write():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     44e:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     450:	ea 89       	ldd	r30, Y+18	; 0x12
     452:	fb 89       	ldd	r31, Y+19	; 0x13
     454:	80 81       	ld	r24, Z
     456:	80 62       	ori	r24, 0x20	; 32
     458:	cf cf       	rjmp	.-98     	; 0x3f8 <HardwareSerial::write(unsigned char)+0x38>

0000045a <HardwareSerial::flush()>:
flush():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	ec 01       	movw	r28, r24
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     460:	88 8d       	ldd	r24, Y+24	; 0x18
     462:	88 23       	and	r24, r24
     464:	b9 f0       	breq	.+46     	; 0x494 <HardwareSerial::flush()+0x3a>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     466:	aa 89       	ldd	r26, Y+18	; 0x12
     468:	bb 89       	ldd	r27, Y+19	; 0x13
     46a:	e8 89       	ldd	r30, Y+16	; 0x10
     46c:	f9 89       	ldd	r31, Y+17	; 0x11
     46e:	8c 91       	ld	r24, X
     470:	85 fd       	sbrc	r24, 5
     472:	03 c0       	rjmp	.+6      	; 0x47a <HardwareSerial::flush()+0x20>
     474:	80 81       	ld	r24, Z
     476:	86 fd       	sbrc	r24, 6
     478:	0d c0       	rjmp	.+26     	; 0x494 <HardwareSerial::flush()+0x3a>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	07 fc       	sbrc	r0, 7
     47e:	f7 cf       	rjmp	.-18     	; 0x46e <HardwareSerial::flush()+0x14>
     480:	8c 91       	ld	r24, X
     482:	85 ff       	sbrs	r24, 5
     484:	f2 cf       	rjmp	.-28     	; 0x46a <HardwareSerial::flush()+0x10>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     486:	80 81       	ld	r24, Z
     488:	85 ff       	sbrs	r24, 5
     48a:	ed cf       	rjmp	.-38     	; 0x466 <HardwareSerial::flush()+0xc>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     48c:	ce 01       	movw	r24, r28
     48e:	0e 94 be 01 	call	0x37c	; 0x37c <HardwareSerial::_tx_udr_empty_irq()>
     492:	e9 cf       	rjmp	.-46     	; 0x466 <HardwareSerial::flush()+0xc>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	08 95       	ret

0000049a <serialEventRun()>:
serialEventRun():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	89 2b       	or	r24, r25
     4a0:	29 f0       	breq	.+10     	; 0x4ac <serialEventRun()+0x12>
     4a2:	0e 94 b4 01 	call	0x368	; 0x368 <Serial0_available()>
     4a6:	81 11       	cpse	r24, r1
     4a8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	89 2b       	or	r24, r25
     4b2:	29 f0       	breq	.+10     	; 0x4be <serialEventRun()+0x24>
     4b4:	0e 94 aa 01 	call	0x354	; 0x354 <Serial1_available()>
     4b8:	81 11       	cpse	r24, r1
     4ba:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:73
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	89 2b       	or	r24, r25
     4c4:	49 f0       	breq	.+18     	; 0x4d8 <serialEventRun()+0x3e>
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	89 2b       	or	r24, r25
     4cc:	29 f0       	breq	.+10     	; 0x4d8 <serialEventRun()+0x3e>
     4ce:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     4d2:	81 11       	cpse	r24, r1
     4d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:78
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     4d8:	08 95       	ret

000004da <turnOffPWM>:
turnOffPWM():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     4da:	82 50       	subi	r24, 0x02	; 2
     4dc:	8d 30       	cpi	r24, 0x0D	; 13
     4de:	08 f0       	brcs	.+2      	; 0x4e2 <turnOffPWM+0x8>
     4e0:	3e c0       	rjmp	.+124    	; 0x55e <turnOffPWM+0x84>
     4e2:	e8 2f       	mov	r30, r24
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	e9 58       	subi	r30, 0x89	; 137
     4e8:	fd 4f       	sbci	r31, 0xFD	; 253
     4ea:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__tablejump2__>
     4ee:	ac 02       	muls	r26, r28
     4f0:	b0 02       	muls	r27, r16
     4f2:	84 02       	muls	r24, r20
     4f4:	8a 02       	muls	r24, r26
     4f6:	af 02       	muls	r26, r31
     4f8:	af 02       	muls	r26, r31
     4fa:	8e 02       	muls	r24, r30
     4fc:	94 02       	muls	r25, r20
     4fe:	98 02       	muls	r25, r24
     500:	9e 02       	muls	r25, r30
     502:	af 02       	muls	r26, r31
     504:	a2 02       	muls	r26, r18
     506:	a8 02       	muls	r26, r24
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     508:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     50c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     50e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     512:	08 95       	ret
     514:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     518:	8f 7d       	andi	r24, 0xDF	; 223
     51a:	f9 cf       	rjmp	.-14     	; 0x50e <turnOffPWM+0x34>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     51c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     520:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     522:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     526:	08 95       	ret
     528:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     52c:	8f 7d       	andi	r24, 0xDF	; 223
     52e:	f9 cf       	rjmp	.-14     	; 0x522 <turnOffPWM+0x48>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
     530:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
     534:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
     536:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
     53a:	08 95       	ret
     53c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
     540:	8f 7d       	andi	r24, 0xDF	; 223
     542:	f9 cf       	rjmp	.-14     	; 0x536 <turnOffPWM+0x5c>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
     544:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
     548:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:138
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
     54a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
     54e:	08 95       	ret
     550:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
     554:	8f 7d       	andi	r24, 0xDF	; 223
     556:	f9 cf       	rjmp	.-14     	; 0x54a <turnOffPWM+0x70>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     558:	84 b5       	in	r24, 0x24	; 36
     55a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     55c:	84 bd       	out	0x24, r24	; 36
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     55e:	08 95       	ret
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     560:	84 b5       	in	r24, 0x24	; 36
     562:	8f 7d       	andi	r24, 0xDF	; 223
     564:	fb cf       	rjmp	.-10     	; 0x55c <turnOffPWM+0x82>

00000566 <digitalRead>:
digitalRead():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     56a:	28 2f       	mov	r18, r24
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	f9 01       	movw	r30, r18
     570:	e2 5c       	subi	r30, 0xC2	; 194
     572:	fe 4f       	sbci	r31, 0xFE	; 254
     574:	84 91       	lpm	r24, Z
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     576:	f9 01       	movw	r30, r18
     578:	e9 5e       	subi	r30, 0xE9	; 233
     57a:	fe 4f       	sbci	r31, 0xFE	; 254
     57c:	d4 91       	lpm	r29, Z
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     57e:	f9 01       	movw	r30, r18
     580:	e0 51       	subi	r30, 0x10	; 16
     582:	ff 4f       	sbci	r31, 0xFF	; 255
     584:	c4 91       	lpm	r28, Z
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     586:	cc 23       	and	r28, r28
     588:	a1 f0       	breq	.+40     	; 0x5b2 <digitalRead+0x4c>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     58a:	81 11       	cpse	r24, r1
     58c:	0e 94 6d 02 	call	0x4da	; 0x4da <turnOffPWM>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     590:	ec 2f       	mov	r30, r28
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	ee 0f       	add	r30, r30
     596:	ff 1f       	adc	r31, r31
     598:	ec 51       	subi	r30, 0x1C	; 28
     59a:	ff 4f       	sbci	r31, 0xFF	; 255
     59c:	a5 91       	lpm	r26, Z+
     59e:	b4 91       	lpm	r27, Z
     5a0:	ec 91       	ld	r30, X
     5a2:	ed 23       	and	r30, r29
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	09 f4       	brne	.+2      	; 0x5ac <digitalRead+0x46>
     5aa:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	fa cf       	rjmp	.-12     	; 0x5ac <digitalRead+0x46>

000005b8 <digitalWrite>:
digitalWrite():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     5be:	28 2f       	mov	r18, r24
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	f9 01       	movw	r30, r18
     5c4:	e2 5c       	subi	r30, 0xC2	; 194
     5c6:	fe 4f       	sbci	r31, 0xFE	; 254
     5c8:	84 91       	lpm	r24, Z
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     5ca:	f9 01       	movw	r30, r18
     5cc:	e9 5e       	subi	r30, 0xE9	; 233
     5ce:	fe 4f       	sbci	r31, 0xFE	; 254
     5d0:	d4 91       	lpm	r29, Z
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     5d2:	f9 01       	movw	r30, r18
     5d4:	e0 51       	subi	r30, 0x10	; 16
     5d6:	ff 4f       	sbci	r31, 0xFF	; 255
     5d8:	c4 91       	lpm	r28, Z
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     5da:	cc 23       	and	r28, r28
     5dc:	a9 f0       	breq	.+42     	; 0x608 <digitalWrite+0x50>
     5de:	16 2f       	mov	r17, r22
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     5e0:	81 11       	cpse	r24, r1
     5e2:	0e 94 6d 02 	call	0x4da	; 0x4da <turnOffPWM>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     5e6:	ec 2f       	mov	r30, r28
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	e8 52       	subi	r30, 0x28	; 40
     5f0:	ff 4f       	sbci	r31, 0xFF	; 255
     5f2:	a5 91       	lpm	r26, Z+
     5f4:	b4 91       	lpm	r27, Z
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     5f6:	8f b7       	in	r24, 0x3f	; 63
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     5f8:	f8 94       	cli
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     5fa:	ec 91       	ld	r30, X
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     5fc:	11 11       	cpse	r17, r1
     5fe:	08 c0       	rjmp	.+16     	; 0x610 <digitalWrite+0x58>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     600:	d0 95       	com	r29
     602:	de 23       	and	r29, r30
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     604:	dc 93       	st	X, r29
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     606:	8f bf       	out	0x3f, r24	; 63
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:212
}
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	08 95       	ret
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     610:	de 2b       	or	r29, r30
     612:	f8 cf       	rjmp	.-16     	; 0x604 <digitalWrite+0x4c>

00000614 <pinMode>:
pinMode():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	fc 01       	movw	r30, r24
     61c:	e9 5e       	subi	r30, 0xE9	; 233
     61e:	fe 4f       	sbci	r31, 0xFE	; 254
     620:	24 91       	lpm	r18, Z
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     622:	80 51       	subi	r24, 0x10	; 16
     624:	9f 4f       	sbci	r25, 0xFF	; 255
     626:	fc 01       	movw	r30, r24
     628:	84 91       	lpm	r24, Z
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     62a:	88 23       	and	r24, r24
     62c:	d1 f0       	breq	.+52     	; 0x662 <pinMode+0x4e>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	fc 01       	movw	r30, r24
     636:	e4 53       	subi	r30, 0x34	; 52
     638:	ff 4f       	sbci	r31, 0xFF	; 255
     63a:	a5 91       	lpm	r26, Z+
     63c:	b4 91       	lpm	r27, Z
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     63e:	fc 01       	movw	r30, r24
     640:	e8 52       	subi	r30, 0x28	; 40
     642:	ff 4f       	sbci	r31, 0xFF	; 255
     644:	c5 91       	lpm	r28, Z+
     646:	d4 91       	lpm	r29, Z
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     648:	61 11       	cpse	r22, r1
     64a:	0e c0       	rjmp	.+28     	; 0x668 <pinMode+0x54>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     64c:	9f b7       	in	r25, 0x3f	; 63
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     64e:	f8 94       	cli
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     650:	8c 91       	ld	r24, X
     652:	e2 2f       	mov	r30, r18
     654:	e0 95       	com	r30
     656:	8e 23       	and	r24, r30
     658:	8c 93       	st	X, r24
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     65a:	28 81       	ld	r18, Y
     65c:	e2 23       	and	r30, r18
     65e:	e8 83       	st	Y, r30
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     660:	9f bf       	out	0x3f, r25	; 63
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	08 95       	ret
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     668:	8f b7       	in	r24, 0x3f	; 63
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     66a:	f8 94       	cli
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     66c:	ec 91       	ld	r30, X
     66e:	e2 2b       	or	r30, r18
     670:	ec 93       	st	X, r30
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     672:	8f bf       	out	0x3f, r24	; 63
     674:	f6 cf       	rjmp	.-20     	; 0x662 <pinMode+0x4e>

00000676 <micros>:
micros():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     676:	3f b7       	in	r19, 0x3f	; 63
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     678:	f8 94       	cli
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     67a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <timer0_overflow_count>
     67e:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <timer0_overflow_count+0x1>
     682:	a0 91 40 01 	lds	r26, 0x0140	; 0x800140 <timer0_overflow_count+0x2>
     686:	b0 91 41 01 	lds	r27, 0x0141	; 0x800141 <timer0_overflow_count+0x3>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     68a:	26 b5       	in	r18, 0x26	; 38
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     68c:	a8 9b       	sbis	0x15, 0	; 21
     68e:	05 c0       	rjmp	.+10     	; 0x69a <micros+0x24>
     690:	2f 3f       	cpi	r18, 0xFF	; 255
     692:	19 f0       	breq	.+6      	; 0x69a <micros+0x24>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	a1 1d       	adc	r26, r1
     698:	b1 1d       	adc	r27, r1
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     69a:	3f bf       	out	0x3f, r19	; 63
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     69c:	ba 2f       	mov	r27, r26
     69e:	a9 2f       	mov	r26, r25
     6a0:	98 2f       	mov	r25, r24
     6a2:	88 27       	eor	r24, r24
     6a4:	bc 01       	movw	r22, r24
     6a6:	cd 01       	movw	r24, r26
     6a8:	62 0f       	add	r22, r18
     6aa:	71 1d       	adc	r23, r1
     6ac:	81 1d       	adc	r24, r1
     6ae:	91 1d       	adc	r25, r1
     6b0:	43 e0       	ldi	r20, 0x03	; 3
     6b2:	66 0f       	add	r22, r22
     6b4:	77 1f       	adc	r23, r23
     6b6:	88 1f       	adc	r24, r24
     6b8:	99 1f       	adc	r25, r25
     6ba:	4a 95       	dec	r20
     6bc:	d1 f7       	brne	.-12     	; 0x6b2 <micros+0x3c>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     6be:	08 95       	ret

000006c0 <delay>:
delay():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     6c0:	8f 92       	push	r8
     6c2:	9f 92       	push	r9
     6c4:	af 92       	push	r10
     6c6:	bf 92       	push	r11
     6c8:	cf 92       	push	r12
     6ca:	df 92       	push	r13
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	4b 01       	movw	r8, r22
     6d2:	5c 01       	movw	r10, r24
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     6d4:	0e 94 3b 03 	call	0x676	; 0x676 <micros>
     6d8:	6b 01       	movw	r12, r22
     6da:	7c 01       	movw	r14, r24
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     6dc:	0e 94 3b 03 	call	0x676	; 0x676 <micros>
     6e0:	6c 19       	sub	r22, r12
     6e2:	7d 09       	sbc	r23, r13
     6e4:	8e 09       	sbc	r24, r14
     6e6:	9f 09       	sbc	r25, r15
     6e8:	68 3e       	cpi	r22, 0xE8	; 232
     6ea:	73 40       	sbci	r23, 0x03	; 3
     6ec:	81 05       	cpc	r24, r1
     6ee:	91 05       	cpc	r25, r1
     6f0:	a8 f3       	brcs	.-22     	; 0x6dc <delay+0x1c>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     6f2:	21 e0       	ldi	r18, 0x01	; 1
     6f4:	82 1a       	sub	r8, r18
     6f6:	91 08       	sbc	r9, r1
     6f8:	a1 08       	sbc	r10, r1
     6fa:	b1 08       	sbc	r11, r1
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     6fc:	88 ee       	ldi	r24, 0xE8	; 232
     6fe:	c8 0e       	add	r12, r24
     700:	83 e0       	ldi	r24, 0x03	; 3
     702:	d8 1e       	adc	r13, r24
     704:	e1 1c       	adc	r14, r1
     706:	f1 1c       	adc	r15, r1
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     708:	81 14       	cp	r8, r1
     70a:	91 04       	cpc	r9, r1
     70c:	a1 04       	cpc	r10, r1
     70e:	b1 04       	cpc	r11, r1
     710:	29 f7       	brne	.-54     	; 0x6dc <delay+0x1c>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     712:	ff 90       	pop	r15
     714:	ef 90       	pop	r14
     716:	df 90       	pop	r13
     718:	cf 90       	pop	r12
     71a:	bf 90       	pop	r11
     71c:	af 90       	pop	r10
     71e:	9f 90       	pop	r9
     720:	8f 90       	pop	r8
     722:	08 95       	ret

00000724 <Print::println(char const*)>:
println():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:139
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	ec 01       	movw	r28, r24
write():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     72e:	fb 01       	movw	r30, r22
     730:	01 90       	ld	r0, Z+
     732:	00 20       	and	r0, r0
     734:	e9 f7       	brne	.-6      	; 0x730 <Print::println(char const*)+0xc>
     736:	31 97       	sbiw	r30, 0x01	; 1
     738:	af 01       	movw	r20, r30
     73a:	46 1b       	sub	r20, r22
     73c:	57 0b       	sbc	r21, r23
     73e:	0e 94 40 01 	call	0x280	; 0x280 <Print::write(unsigned char const*, unsigned int)>
     742:	8c 01       	movw	r16, r24
     744:	42 e0       	ldi	r20, 0x02	; 2
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	60 e2       	ldi	r22, 0x20	; 32
     74a:	71 e0       	ldi	r23, 0x01	; 1
     74c:	ce 01       	movw	r24, r28
     74e:	0e 94 40 01 	call	0x280	; 0x280 <Print::write(unsigned char const*, unsigned int)>
println():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:143
  size_t n = print(c);
  n += println();
  return n;
}
     752:	80 0f       	add	r24, r16
     754:	91 1f       	adc	r25, r17
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	08 95       	ret

00000760 <__vector_29>:
__vector_29():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:59
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     760:	1f 92       	push	r1
     762:	0f 92       	push	r0
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	0f 92       	push	r0
     768:	11 24       	eor	r1, r1
     76a:	2f 93       	push	r18
     76c:	3f 93       	push	r19
     76e:	4f 93       	push	r20
     770:	5f 93       	push	r21
     772:	6f 93       	push	r22
     774:	7f 93       	push	r23
     776:	8f 93       	push	r24
     778:	9f 93       	push	r25
     77a:	af 93       	push	r26
     77c:	bf 93       	push	r27
     77e:	ef 93       	push	r30
     780:	ff 93       	push	r31
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:60
  Serial1._tx_udr_empty_irq();
     782:	82 e5       	ldi	r24, 0x52	; 82
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0e 94 be 01 	call	0x37c	; 0x37c <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:61
}
     78a:	ff 91       	pop	r31
     78c:	ef 91       	pop	r30
     78e:	bf 91       	pop	r27
     790:	af 91       	pop	r26
     792:	9f 91       	pop	r25
     794:	8f 91       	pop	r24
     796:	7f 91       	pop	r23
     798:	6f 91       	pop	r22
     79a:	5f 91       	pop	r21
     79c:	4f 91       	pop	r20
     79e:	3f 91       	pop	r19
     7a0:	2f 91       	pop	r18
     7a2:	0f 90       	pop	r0
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	0f 90       	pop	r0
     7a8:	1f 90       	pop	r1
     7aa:	18 95       	reti

000007ac <__vector_28>:
__vector_28():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:48
#elif defined(USART1_RXC_vect)
ISR(USART1_RXC_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     7ac:	1f 92       	push	r1
     7ae:	0f 92       	push	r0
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	0f 92       	push	r0
     7b4:	11 24       	eor	r1, r1
     7b6:	2f 93       	push	r18
     7b8:	8f 93       	push	r24
     7ba:	9f 93       	push	r25
     7bc:	ef 93       	push	r30
     7be:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     7c0:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <Serial1+0x10>
     7c4:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <Serial1+0x11>
     7c8:	80 81       	ld	r24, Z
     7ca:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <Serial1+0x16>
     7ce:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <Serial1+0x17>
     7d2:	82 fd       	sbrc	r24, 2
     7d4:	1b c0       	rjmp	.+54     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     7d6:	90 81       	ld	r25, Z
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     7d8:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <Serial1+0x19>
     7dc:	8f 5f       	subi	r24, 0xFF	; 255
     7de:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     7e0:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <Serial1+0x1a>
     7e4:	82 17       	cp	r24, r18
     7e6:	41 f0       	breq	.+16     	; 0x7f8 <__vector_28+0x4c>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     7e8:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <Serial1+0x19>
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	ee 5a       	subi	r30, 0xAE	; 174
     7f0:	fe 4f       	sbci	r31, 0xFE	; 254
     7f2:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     7f4:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <Serial1+0x19>
__vector_28():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
  Serial1._rx_complete_irq();
}
     7f8:	ff 91       	pop	r31
     7fa:	ef 91       	pop	r30
     7fc:	9f 91       	pop	r25
     7fe:	8f 91       	pop	r24
     800:	2f 91       	pop	r18
     802:	0f 90       	pop	r0
     804:	0f be       	out	0x3f, r0	; 63
     806:	0f 90       	pop	r0
     808:	1f 90       	pop	r1
     80a:	18 95       	reti
_rx_complete_irq():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     80c:	80 81       	ld	r24, Z
     80e:	f4 cf       	rjmp	.-24     	; 0x7f8 <__vector_28+0x4c>

00000810 <__vector_21>:
__vector_21():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     810:	1f 92       	push	r1
     812:	0f 92       	push	r0
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	0f 92       	push	r0
     818:	11 24       	eor	r1, r1
     81a:	2f 93       	push	r18
     81c:	3f 93       	push	r19
     81e:	4f 93       	push	r20
     820:	5f 93       	push	r21
     822:	6f 93       	push	r22
     824:	7f 93       	push	r23
     826:	8f 93       	push	r24
     828:	9f 93       	push	r25
     82a:	af 93       	push	r26
     82c:	bf 93       	push	r27
     82e:	ef 93       	push	r30
     830:	ff 93       	push	r31
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     832:	8f ee       	ldi	r24, 0xEF	; 239
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 be 01 	call	0x37c	; 0x37c <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
     83a:	ff 91       	pop	r31
     83c:	ef 91       	pop	r30
     83e:	bf 91       	pop	r27
     840:	af 91       	pop	r26
     842:	9f 91       	pop	r25
     844:	8f 91       	pop	r24
     846:	7f 91       	pop	r23
     848:	6f 91       	pop	r22
     84a:	5f 91       	pop	r21
     84c:	4f 91       	pop	r20
     84e:	3f 91       	pop	r19
     850:	2f 91       	pop	r18
     852:	0f 90       	pop	r0
     854:	0f be       	out	0x3f, r0	; 63
     856:	0f 90       	pop	r0
     858:	1f 90       	pop	r1
     85a:	18 95       	reti

0000085c <__vector_20>:
__vector_20():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     85c:	1f 92       	push	r1
     85e:	0f 92       	push	r0
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	0f 92       	push	r0
     864:	11 24       	eor	r1, r1
     866:	2f 93       	push	r18
     868:	8f 93       	push	r24
     86a:	9f 93       	push	r25
     86c:	ef 93       	push	r30
     86e:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     870:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <Serial+0x10>
     874:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <Serial+0x11>
     878:	80 81       	ld	r24, Z
     87a:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <Serial+0x16>
     87e:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <Serial+0x17>
     882:	82 fd       	sbrc	r24, 2
     884:	1b c0       	rjmp	.+54     	; 0x8bc <__vector_20+0x60>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     886:	90 81       	ld	r25, Z
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     888:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Serial+0x19>
     88c:	8f 5f       	subi	r24, 0xFF	; 255
     88e:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     890:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <Serial+0x1a>
     894:	82 17       	cp	r24, r18
     896:	41 f0       	breq	.+16     	; 0x8a8 <__vector_20+0x4c>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     898:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <Serial+0x19>
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	e1 51       	subi	r30, 0x11	; 17
     8a0:	fe 4f       	sbci	r31, 0xFE	; 254
     8a2:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     8a4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <Serial+0x19>
__vector_20():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
     8a8:	ff 91       	pop	r31
     8aa:	ef 91       	pop	r30
     8ac:	9f 91       	pop	r25
     8ae:	8f 91       	pop	r24
     8b0:	2f 91       	pop	r18
     8b2:	0f 90       	pop	r0
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	0f 90       	pop	r0
     8b8:	1f 90       	pop	r1
     8ba:	18 95       	reti
_rx_complete_irq():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     8bc:	80 81       	ld	r24, Z
     8be:	f4 cf       	rjmp	.-24     	; 0x8a8 <__vector_20+0x4c>

000008c0 <__vector_18>:
__vector_18():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     8c0:	1f 92       	push	r1
     8c2:	0f 92       	push	r0
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	0f 92       	push	r0
     8c8:	11 24       	eor	r1, r1
     8ca:	2f 93       	push	r18
     8cc:	3f 93       	push	r19
     8ce:	8f 93       	push	r24
     8d0:	9f 93       	push	r25
     8d2:	af 93       	push	r26
     8d4:	bf 93       	push	r27
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     8d6:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <timer0_millis>
     8da:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <timer0_millis+0x1>
     8de:	a0 91 8e 02 	lds	r26, 0x028E	; 0x80028e <timer0_millis+0x2>
     8e2:	b0 91 8f 02 	lds	r27, 0x028F	; 0x80028f <timer0_millis+0x3>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     8e6:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <timer0_fract>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     8ea:	26 e0       	ldi	r18, 0x06	; 6
     8ec:	23 0f       	add	r18, r19
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     8ee:	2d 37       	cpi	r18, 0x7D	; 125
     8f0:	68 f1       	brcs	.+90     	; 0x94c <__stack+0x4d>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     8f2:	29 e8       	ldi	r18, 0x89	; 137
     8f4:	23 0f       	add	r18, r19
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     8f6:	03 96       	adiw	r24, 0x03	; 3
     8f8:	a1 1d       	adc	r26, r1
     8fa:	b1 1d       	adc	r27, r1
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     8fc:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <timer0_fract>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     900:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <timer0_millis>
     904:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <timer0_millis+0x1>
     908:	a0 93 8e 02 	sts	0x028E, r26	; 0x80028e <timer0_millis+0x2>
     90c:	b0 93 8f 02 	sts	0x028F, r27	; 0x80028f <timer0_millis+0x3>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     910:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <timer0_overflow_count>
     914:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <timer0_overflow_count+0x1>
     918:	a0 91 40 01 	lds	r26, 0x0140	; 0x800140 <timer0_overflow_count+0x2>
     91c:	b0 91 41 01 	lds	r27, 0x0141	; 0x800141 <timer0_overflow_count+0x3>
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	a1 1d       	adc	r26, r1
     924:	b1 1d       	adc	r27, r1
     926:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <timer0_overflow_count>
     92a:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <timer0_overflow_count+0x1>
     92e:	a0 93 40 01 	sts	0x0140, r26	; 0x800140 <timer0_overflow_count+0x2>
     932:	b0 93 41 01 	sts	0x0141, r27	; 0x800141 <timer0_overflow_count+0x3>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:213
#endif
}
     936:	bf 91       	pop	r27
     938:	af 91       	pop	r26
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	3f 91       	pop	r19
     940:	2f 91       	pop	r18
     942:	0f 90       	pop	r0
     944:	0f be       	out	0x3f, r0	; 63
     946:	0f 90       	pop	r0
     948:	1f 90       	pop	r1
     94a:	18 95       	reti
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     94c:	02 96       	adiw	r24, 0x02	; 2
     94e:	a1 1d       	adc	r26, r1
     950:	b1 1d       	adc	r27, r1
     952:	d4 cf       	rjmp	.-88     	; 0x8fc <__vector_18+0x3c>

00000954 <__vector_13>:
__vector_13():
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:81

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
     954:	1f 92       	push	r1
     956:	0f 92       	push	r0
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	0f 92       	push	r0
     95c:	11 24       	eor	r1, r1
     95e:	2f 93       	push	r18
     960:	3f 93       	push	r19
     962:	4f 93       	push	r20
     964:	5f 93       	push	r21
     966:	6f 93       	push	r22
     968:	7f 93       	push	r23
     96a:	8f 93       	push	r24
     96c:	9f 93       	push	r25
     96e:	af 93       	push	r26
     970:	bf 93       	push	r27
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	ef 93       	push	r30
     978:	ff 93       	push	r31
handle_interrupts():
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:54

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
     97a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
     97e:	c0 91 b4 02 	lds	r28, 0x02B4	; 0x8002b4 <ServoCount>
     982:	d0 e0       	ldi	r29, 0x00	; 0
     984:	87 ff       	sbrs	r24, 7
     986:	24 c0       	rjmp	.+72     	; 0x9d0 <__vector_13+0x7c>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:55
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
     988:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     98c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:61
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
     990:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
     994:	8f 5f       	subi	r24, 0xFF	; 255
     996:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:62
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
     99a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
     99e:	08 2e       	mov	r0, r24
     9a0:	00 0c       	add	r0, r0
     9a2:	99 0b       	sbc	r25, r25
     9a4:	8c 17       	cp	r24, r28
     9a6:	9d 07       	cpc	r25, r29
     9a8:	24 f4       	brge	.+8      	; 0x9b2 <__vector_13+0x5e>
     9aa:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
     9ae:	8c 30       	cpi	r24, 0x0C	; 12
     9b0:	c4 f1       	brlt	.+112    	; 0xa22 <__vector_13+0xce>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:69
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // it's an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
     9b2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     9b6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     9ba:	04 96       	adiw	r24, 0x04	; 4
     9bc:	80 32       	cpi	r24, 0x20	; 32
     9be:	9e 44       	sbci	r25, 0x4E	; 78
     9c0:	08 f4       	brcc	.+2      	; 0x9c4 <__vector_13+0x70>
     9c2:	7a c0       	rjmp	.+244    	; 0xab8 <__vector_13+0x164>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:72
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     9c4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     9c8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     9cc:	04 96       	adiw	r24, 0x04	; 4
     9ce:	76 c0       	rjmp	.+236    	; 0xabc <__vector_13+0x168>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:57
static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
     9d0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
     9d4:	08 2e       	mov	r0, r24
     9d6:	00 0c       	add	r0, r0
     9d8:	99 0b       	sbc	r25, r25
     9da:	8c 17       	cp	r24, r28
     9dc:	9d 07       	cpc	r25, r29
     9de:	c4 f6       	brge	.-80     	; 0x990 <__vector_13+0x3c>
     9e0:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <__data_end>
     9e4:	8e 2f       	mov	r24, r30
     9e6:	ee 0f       	add	r30, r30
     9e8:	99 0b       	sbc	r25, r25
     9ea:	fc 01       	movw	r30, r24
     9ec:	ee 0f       	add	r30, r30
     9ee:	ff 1f       	adc	r31, r31
     9f0:	e8 0f       	add	r30, r24
     9f2:	f9 1f       	adc	r31, r25
     9f4:	e0 57       	subi	r30, 0x70	; 112
     9f6:	fd 4f       	sbci	r31, 0xFD	; 253
     9f8:	80 81       	ld	r24, Z
     9fa:	86 ff       	sbrs	r24, 6
     9fc:	c9 cf       	rjmp	.-110    	; 0x990 <__vector_13+0x3c>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:58
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
     9fe:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <__data_end>
     a02:	8e 2f       	mov	r24, r30
     a04:	ee 0f       	add	r30, r30
     a06:	99 0b       	sbc	r25, r25
     a08:	fc 01       	movw	r30, r24
     a0a:	ee 0f       	add	r30, r30
     a0c:	ff 1f       	adc	r31, r31
     a0e:	e8 0f       	add	r30, r24
     a10:	f9 1f       	adc	r31, r25
     a12:	e0 57       	subi	r30, 0x70	; 112
     a14:	fd 4f       	sbci	r31, 0xFD	; 253
     a16:	80 81       	ld	r24, Z
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	8f 73       	andi	r24, 0x3F	; 63
     a1c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
     a20:	b7 cf       	rjmp	.-146    	; 0x990 <__vector_13+0x3c>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:63
  }

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
     a22:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     a26:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     a2a:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <__data_end>
     a2e:	8e 2f       	mov	r24, r30
     a30:	ee 0f       	add	r30, r30
     a32:	99 0b       	sbc	r25, r25
     a34:	fc 01       	movw	r30, r24
     a36:	ee 0f       	add	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	e8 0f       	add	r30, r24
     a3c:	f9 1f       	adc	r31, r25
     a3e:	e0 57       	subi	r30, 0x70	; 112
     a40:	fd 4f       	sbci	r31, 0xFD	; 253
     a42:	81 81       	ldd	r24, Z+1	; 0x01
     a44:	92 81       	ldd	r25, Z+2	; 0x02
     a46:	82 0f       	add	r24, r18
     a48:	93 1f       	adc	r25, r19
     a4a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     a4e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:64
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
     a52:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <__data_end>
     a56:	8e 2f       	mov	r24, r30
     a58:	ee 0f       	add	r30, r30
     a5a:	99 0b       	sbc	r25, r25
     a5c:	fc 01       	movw	r30, r24
     a5e:	ee 0f       	add	r30, r30
     a60:	ff 1f       	adc	r31, r31
     a62:	e8 0f       	add	r30, r24
     a64:	f9 1f       	adc	r31, r25
     a66:	e0 57       	subi	r30, 0x70	; 112
     a68:	fd 4f       	sbci	r31, 0xFD	; 253
     a6a:	80 81       	ld	r24, Z
     a6c:	86 ff       	sbrs	r24, 6
     a6e:	11 c0       	rjmp	.+34     	; 0xa92 <__vector_13+0x13e>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:65
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // it's an active channel so pulse it high
     a70:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <__data_end>
     a74:	8e 2f       	mov	r24, r30
     a76:	ee 0f       	add	r30, r30
     a78:	99 0b       	sbc	r25, r25
     a7a:	fc 01       	movw	r30, r24
     a7c:	ee 0f       	add	r30, r30
     a7e:	ff 1f       	adc	r31, r31
     a80:	e8 0f       	add	r30, r24
     a82:	f9 1f       	adc	r31, r25
     a84:	e0 57       	subi	r30, 0x70	; 112
     a86:	fd 4f       	sbci	r31, 0xFD	; 253
     a88:	80 81       	ld	r24, Z
     a8a:	61 e0       	ldi	r22, 0x01	; 1
     a8c:	8f 73       	andi	r24, 0x3F	; 63
     a8e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
__vector_13():
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:83
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
  handle_interrupts(_timer1, &TCNT1, &OCR1A);
}
     a92:	ff 91       	pop	r31
     a94:	ef 91       	pop	r30
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	bf 91       	pop	r27
     a9c:	af 91       	pop	r26
     a9e:	9f 91       	pop	r25
     aa0:	8f 91       	pop	r24
     aa2:	7f 91       	pop	r23
     aa4:	6f 91       	pop	r22
     aa6:	5f 91       	pop	r21
     aa8:	4f 91       	pop	r20
     aaa:	3f 91       	pop	r19
     aac:	2f 91       	pop	r18
     aae:	0f 90       	pop	r0
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	0f 90       	pop	r0
     ab4:	1f 90       	pop	r1
     ab6:	18 95       	reti
handle_interrupts():
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:70
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // it's an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
     ab8:	80 e2       	ldi	r24, 0x20	; 32
     aba:	9e e4       	ldi	r25, 0x4E	; 78
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:72
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     abc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     ac0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:73
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
     aca:	e3 cf       	rjmp	.-58     	; 0xa92 <__vector_13+0x13e>

00000acc <global constructors keyed to 65535_0_Mainboard.ino.cpp.o.2021>:
_GLOBAL__I_65535_0_Mainboard.ino.cpp.o.2021():
     acc:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <Serial1+0x3>
     ad0:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <Serial1+0x2>
     ad4:	48 ee       	ldi	r20, 0xE8	; 232
     ad6:	53 e0       	ldi	r21, 0x03	; 3
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	40 93 56 01 	sts	0x0156, r20	; 0x800156 <Serial1+0x4>
     ae0:	50 93 57 01 	sts	0x0157, r21	; 0x800157 <Serial1+0x5>
     ae4:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <Serial1+0x6>
     ae8:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <Serial1+0x7>
     aec:	82 e1       	ldi	r24, 0x12	; 18
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <Serial1+0x1>
     af4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <Serial1>
     af8:	2d ec       	ldi	r18, 0xCD	; 205
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <Serial1+0xd>
     b00:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <Serial1+0xc>
     b04:	2c ec       	ldi	r18, 0xCC	; 204
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	30 93 61 01 	sts	0x0161, r19	; 0x800161 <Serial1+0xf>
     b0c:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <Serial1+0xe>
     b10:	28 ec       	ldi	r18, 0xC8	; 200
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <Serial1+0x11>
     b18:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <Serial1+0x10>
     b1c:	29 ec       	ldi	r18, 0xC9	; 201
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	30 93 65 01 	sts	0x0165, r19	; 0x800165 <Serial1+0x13>
     b24:	20 93 64 01 	sts	0x0164, r18	; 0x800164 <Serial1+0x12>
     b28:	2a ec       	ldi	r18, 0xCA	; 202
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	30 93 67 01 	sts	0x0167, r19	; 0x800167 <Serial1+0x15>
     b30:	20 93 66 01 	sts	0x0166, r18	; 0x800166 <Serial1+0x14>
     b34:	2e ec       	ldi	r18, 0xCE	; 206
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <Serial1+0x17>
     b3c:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <Serial1+0x16>
     b40:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <Serial1+0x19>
     b44:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <Serial1+0x1a>
     b48:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <Serial1+0x1b>
     b4c:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <Serial1+0x1c>
     b50:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <Serial+0x3>
     b54:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <Serial+0x2>
     b58:	40 93 f3 01 	sts	0x01F3, r20	; 0x8001f3 <Serial+0x4>
     b5c:	50 93 f4 01 	sts	0x01F4, r21	; 0x8001f4 <Serial+0x5>
     b60:	60 93 f5 01 	sts	0x01F5, r22	; 0x8001f5 <Serial+0x6>
     b64:	70 93 f6 01 	sts	0x01F6, r23	; 0x8001f6 <Serial+0x7>
     b68:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <Serial+0x1>
     b6c:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <Serial>
     b70:	85 ec       	ldi	r24, 0xC5	; 197
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <Serial+0xd>
     b78:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <Serial+0xc>
     b7c:	84 ec       	ldi	r24, 0xC4	; 196
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <Serial+0xf>
     b84:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <Serial+0xe>
     b88:	80 ec       	ldi	r24, 0xC0	; 192
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <Serial+0x11>
     b90:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <Serial+0x10>
     b94:	81 ec       	ldi	r24, 0xC1	; 193
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <Serial+0x13>
     b9c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <Serial+0x12>
     ba0:	82 ec       	ldi	r24, 0xC2	; 194
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <Serial+0x15>
     ba8:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <Serial+0x14>
     bac:	86 ec       	ldi	r24, 0xC6	; 198
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <Serial+0x17>
     bb4:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <Serial+0x16>
     bb8:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <Serial+0x19>
     bbc:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <Serial+0x1a>
     bc0:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <Serial+0x1b>
     bc4:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <Serial+0x1c>
     bc8:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <ServoCount>
     bcc:	8c 30       	cpi	r24, 0x0C	; 12
     bce:	10 f5       	brcc	.+68     	; 0xc14 <global constructors keyed to 65535_0_Mainboard.ino.cpp.o.2021+0x148>
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	98 0f       	add	r25, r24
     bd4:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <ServoCount>
     bd8:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <linearMotor>
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	fc 01       	movw	r30, r24
     be0:	ee 0f       	add	r30, r30
     be2:	ff 1f       	adc	r31, r31
     be4:	e8 0f       	add	r30, r24
     be6:	f9 1f       	adc	r31, r25
     be8:	e0 57       	subi	r30, 0x70	; 112
     bea:	fd 4f       	sbci	r31, 0xFD	; 253
     bec:	8c ed       	ldi	r24, 0xDC	; 220
     bee:	95 e0       	ldi	r25, 0x05	; 5
     bf0:	92 83       	std	Z+2, r25	; 0x02
     bf2:	81 83       	std	Z+1, r24	; 0x01
     bf4:	2f b7       	in	r18, 0x3f	; 63
     bf6:	f8 94       	cli
     bf8:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <timer0_millis>
     bfc:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <timer0_millis+0x1>
     c00:	a0 91 8e 02 	lds	r26, 0x028E	; 0x80028e <timer0_millis+0x2>
     c04:	b0 91 8f 02 	lds	r27, 0x028F	; 0x80028f <timer0_millis+0x3>
     c08:	2f bf       	out	0x3f, r18	; 63
     c0a:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <ms+0x1>
     c0e:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <ms>
     c12:	08 95       	ret
     c14:	8f ef       	ldi	r24, 0xFF	; 255
     c16:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <linearMotor>
     c1a:	ec cf       	rjmp	.-40     	; 0xbf4 <global constructors keyed to 65535_0_Mainboard.ino.cpp.o.2021+0x128>

00000c1c <main>:
main():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	61 97       	sbiw	r28, 0x11	; 17
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
     c30:	78 94       	sei
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
     c32:	84 b5       	in	r24, 0x24	; 36
     c34:	83 60       	ori	r24, 0x03	; 3
     c36:	84 bd       	out	0x24, r24	; 36
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
     c38:	85 b5       	in	r24, 0x25	; 37
     c3a:	83 60       	ori	r24, 0x03	; 3
     c3c:	85 bd       	out	0x25, r24	; 37
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
     c3e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     c42:	81 60       	ori	r24, 0x01	; 1
     c44:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
     c48:	82 e0       	ldi	r24, 0x02	; 2
     c4a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
     c4e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c52:	81 60       	ori	r24, 0x01	; 1
     c54:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
     c58:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     c5c:	81 60       	ori	r24, 0x01	; 1
     c5e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
     c62:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     c66:	84 60       	ori	r24, 0x04	; 4
     c68:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
     c6c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     c70:	81 60       	ori	r24, 0x01	; 1
     c72:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
     c76:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
     c7a:	83 60       	ori	r24, 0x03	; 3
     c7c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
     c80:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
     c84:	81 60       	ori	r24, 0x01	; 1
     c86:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
     c8a:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
     c8e:	83 60       	ori	r24, 0x03	; 3
     c90:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
     c94:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
     c98:	81 60       	ori	r24, 0x01	; 1
     c9a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
     c9e:	86 e8       	ldi	r24, 0x86	; 134
     ca0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
     ca4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
setup():
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:44
int sampleDone = 1;
int sampleState = 0; // 0-heat; 1-solder, 2-wick
int valoare_led = 1;
void setup() {
  //Sample disk
  pinMode(STEP_DISK, OUTPUT);
     ca8:	61 e0       	ldi	r22, 0x01	; 1
     caa:	84 e1       	ldi	r24, 0x14	; 20
     cac:	0e 94 0a 03 	call	0x614	; 0x614 <pinMode>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:45
  pinMode(DIR_DISK, OUTPUT);
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	83 e1       	ldi	r24, 0x13	; 19
     cb4:	0e 94 0a 03 	call	0x614	; 0x614 <pinMode>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:46
  pinMode(EN_DISK, OUTPUT);
     cb8:	61 e0       	ldi	r22, 0x01	; 1
     cba:	82 e1       	ldi	r24, 0x12	; 18
     cbc:	0e 94 0a 03 	call	0x614	; 0x614 <pinMode>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:47
  pinMode(NSLEEP_DISK, OUTPUT);
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	81 e1       	ldi	r24, 0x11	; 17
     cc4:	0e 94 0a 03 	call	0x614	; 0x614 <pinMode>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:48
  digitalWrite(EN_DISK, HIGH);
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	82 e1       	ldi	r24, 0x12	; 18
     ccc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:49
  digitalWrite(NSLEEP_DISK, HIGH);
     cd0:	61 e0       	ldi	r22, 0x01	; 1
     cd2:	81 e1       	ldi	r24, 0x11	; 17
     cd4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:52

  //Feeding mechanism
  pinMode(STEP_FM, OUTPUT);
     cd8:	61 e0       	ldi	r22, 0x01	; 1
     cda:	8c e1       	ldi	r24, 0x1C	; 28
     cdc:	0e 94 0a 03 	call	0x614	; 0x614 <pinMode>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:53
  pinMode(DIR_FM, OUTPUT);
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	87 e1       	ldi	r24, 0x17	; 23
     ce4:	0e 94 0a 03 	call	0x614	; 0x614 <pinMode>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:54
  pinMode(EN_FM, OUTPUT);
     ce8:	61 e0       	ldi	r22, 0x01	; 1
     cea:	86 e1       	ldi	r24, 0x16	; 22
     cec:	0e 94 0a 03 	call	0x614	; 0x614 <pinMode>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:55
  pinMode(NSLEEP_FM, OUTPUT);
     cf0:	61 e0       	ldi	r22, 0x01	; 1
     cf2:	85 e1       	ldi	r24, 0x15	; 21
     cf4:	0e 94 0a 03 	call	0x614	; 0x614 <pinMode>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:56
  digitalWrite(EN_FM, HIGH);
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	86 e1       	ldi	r24, 0x16	; 22
     cfc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:57
  digitalWrite(NSLEEP_FM, HIGH);
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	85 e1       	ldi	r24, 0x15	; 21
     d04:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
attach():
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:240
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
}

uint8_t Servo::attach(int pin, int min, int max)
{
  if(this->servoIndex < MAX_SERVOS ) {
     d08:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <linearMotor>
     d0c:	8c 30       	cpi	r24, 0x0C	; 12
     d0e:	08 f0       	brcs	.+2      	; 0xd12 <main+0xf6>
     d10:	51 c0       	rjmp	.+162    	; 0xdb4 <main+0x198>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:241
    pinMode( pin, OUTPUT) ;                                   // set servo pin to output
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	8c e0       	ldi	r24, 0x0C	; 12
     d16:	0e 94 0a 03 	call	0x614	; 0x614 <pinMode>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:242
    servos[this->servoIndex].Pin.nbr = pin;
     d1a:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <linearMotor>
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	f9 01       	movw	r30, r18
     d24:	ee 0f       	add	r30, r30
     d26:	ff 1f       	adc	r31, r31
     d28:	e2 0f       	add	r30, r18
     d2a:	f3 1f       	adc	r31, r19
     d2c:	e0 57       	subi	r30, 0x70	; 112
     d2e:	fd 4f       	sbci	r31, 0xFD	; 253
     d30:	90 81       	ld	r25, Z
     d32:	90 7c       	andi	r25, 0xC0	; 192
     d34:	9c 60       	ori	r25, 0x0C	; 12
     d36:	90 83       	st	Z, r25
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:244
    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 < 128
    this->min  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 us
     d38:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <linearMotor+0x1>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:245
    this->max  = (MAX_PULSE_WIDTH - max)/4;
     d3c:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <linearMotor+0x2>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:247
    // initialize the timer if it has not already been initialized
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
     d40:	2c e0       	ldi	r18, 0x0C	; 12
     d42:	62 2f       	mov	r22, r18
     d44:	0e 94 85 0b 	call	0x170a	; 0x170a <__udivmodqi4>
isTimerActive():
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:214

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
     d48:	82 9f       	mul	r24, r18
     d4a:	b0 01       	movw	r22, r0
     d4c:	11 24       	eor	r1, r1
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	ab 01       	movw	r20, r22
     d54:	42 0f       	add	r20, r18
     d56:	53 1f       	adc	r21, r19
     d58:	fa 01       	movw	r30, r20
     d5a:	ee 0f       	add	r30, r30
     d5c:	ff 1f       	adc	r31, r31
     d5e:	e4 0f       	add	r30, r20
     d60:	f5 1f       	adc	r31, r21
     d62:	e0 57       	subi	r30, 0x70	; 112
     d64:	fd 4f       	sbci	r31, 0xFD	; 253
     d66:	90 81       	ld	r25, Z
     d68:	96 fd       	sbrc	r25, 6
     d6a:	16 c0       	rjmp	.+44     	; 0xd98 <main+0x17c>
     d6c:	2f 5f       	subi	r18, 0xFF	; 255
     d6e:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:213
}

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
     d70:	2c 30       	cpi	r18, 0x0C	; 12
     d72:	31 05       	cpc	r19, r1
     d74:	71 f7       	brne	.-36     	; 0xd52 <main+0x136>
initISR():
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:127


static void initISR(timer16_Sequence_t timer)
{
#if defined (_useTimer1)
  if(timer == _timer1) {
     d76:	81 11       	cpse	r24, r1
     d78:	0f c0       	rjmp	.+30     	; 0xd98 <main+0x17c>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:128
    TCCR1A = 0;             // normal counting mode
     d7a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:129
    TCCR1B = _BV(CS11);     // set prescaler of 8
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:130
    TCNT1 = 0;              // clear the timer count
     d84:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d88:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:136
#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)
    TIFR |= _BV(OCF1A);      // clear any pending interrupts
    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt
#else
    // here if not ATmega8 or ATmega128
    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts
     d8c:	b1 9a       	sbi	0x16, 1	; 22
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:137
    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt
     d8e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     d92:	82 60       	ori	r24, 0x02	; 2
     d94:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
attach():
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:250
    this->max  = (MAX_PULSE_WIDTH - max)/4;
    // initialize the timer if it has not already been initialized
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    if(isTimerActive(timer) == false)
      initISR(timer);
    servos[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
     d98:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <linearMotor>
     d9c:	8e 2f       	mov	r24, r30
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	fc 01       	movw	r30, r24
     da2:	ee 0f       	add	r30, r30
     da4:	ff 1f       	adc	r31, r31
     da6:	e8 0f       	add	r30, r24
     da8:	f9 1f       	adc	r31, r25
     daa:	e0 57       	subi	r30, 0x70	; 112
     dac:	fd 4f       	sbci	r31, 0xFD	; 253
     dae:	80 81       	ld	r24, Z
     db0:	80 64       	ori	r24, 0x40	; 64
     db2:	80 83       	st	Z, r24
setup():
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:61

  //Linear
  linearMotor.attach(linearMotor_Pin);
  linearMotor.write(linearMotor_minPos); //departe de disk
     db4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Servo::write(int) [clone .constprop.11]>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:74

// feedingMechanism.setMaxSpeed(100.0);
// feedingMechanism.setAcceleration(50.0);
// feedingMechanism.setCurrentPosition(0);

  pinMode(CAM_LED, OUTPUT);
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	86 e2       	ldi	r24, 0x26	; 38
     dbc:	0e 94 0a 03 	call	0x614	; 0x614 <pinMode>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:75
  digitalWrite(CAM_LED, LOW);
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	86 e2       	ldi	r24, 0x26	; 38
     dc4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:77

  pinMode(PWM_Solder, OUTPUT);
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	8e e0       	ldi	r24, 0x0E	; 14
     dcc:	0e 94 0a 03 	call	0x614	; 0x614 <pinMode>
analogWrite():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	8e e0       	ldi	r24, 0x0E	; 14
     dd4:	0e 94 0a 03 	call	0x614	; 0x614 <pinMode>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:104
  if (val == 0)
  {
    digitalWrite(pin, LOW);
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	8e e0       	ldi	r24, 0x0E	; 14
     ddc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
begin():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     de0:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <Serial+0x10>
     de4:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <Serial+0x11>
     de8:	a2 e0       	ldi	r26, 0x02	; 2
     dea:	fa 2e       	mov	r15, r26
     dec:	f0 82       	st	Z, r15
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     dee:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <Serial+0xc>
     df2:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <Serial+0xd>
     df6:	10 82       	st	Z, r1
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
     df8:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <Serial+0xe>
     dfc:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <Serial+0xf>
     e00:	09 e1       	ldi	r16, 0x19	; 25
     e02:	00 83       	st	Z, r16
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
     e04:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <Serial+0x18>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     e08:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <Serial+0x14>
     e0c:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <Serial+0x15>
     e10:	16 e0       	ldi	r17, 0x06	; 6
     e12:	10 83       	st	Z, r17
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
     e14:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <Serial+0x12>
     e18:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <Serial+0x13>
     e1c:	80 81       	ld	r24, Z
     e1e:	88 69       	ori	r24, 0x98	; 152
     e20:	80 83       	st	Z, r24
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
     e22:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <Serial+0x12>
     e26:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <Serial+0x13>
     e2a:	80 81       	ld	r24, Z
     e2c:	8f 7d       	andi	r24, 0xDF	; 223
     e2e:	80 83       	st	Z, r24
setup():
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:83
  analogWrite(PWM_Solder,0);
  //digitalWrite(PWM_Solder, LOW);

  //Setup comms
  Serial.begin(38400);
  Serial.println("Booting up..");
     e30:	63 e2       	ldi	r22, 0x23	; 35
     e32:	71 e0       	ldi	r23, 0x01	; 1
     e34:	8f ee       	ldi	r24, 0xEF	; 239
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	0e 94 92 03 	call	0x724	; 0x724 <Print::println(char const*)>
begin():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     e3c:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <Serial1+0x10>
     e40:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <Serial1+0x11>
     e44:	f0 82       	st	Z, r15
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     e46:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <Serial1+0xc>
     e4a:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <Serial1+0xd>
     e4e:	10 82       	st	Z, r1
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
     e50:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <Serial1+0xe>
     e54:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <Serial1+0xf>
     e58:	00 83       	st	Z, r16
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
     e5a:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <Serial1+0x18>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     e5e:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <Serial1+0x14>
     e62:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <Serial1+0x15>
     e66:	10 83       	st	Z, r17
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
     e68:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <Serial1+0x12>
     e6c:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <Serial1+0x13>
     e70:	80 81       	ld	r24, Z
     e72:	88 69       	ori	r24, 0x98	; 152
     e74:	80 83       	st	Z, r24
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
     e76:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <Serial1+0x12>
     e7a:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <Serial1+0x13>
     e7e:	80 81       	ld	r24, Z
     e80:	8f 7d       	andi	r24, 0xDF	; 223
     e82:	80 83       	st	Z, r24
setup():
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:86

  Serial1.begin(38400);
  Serial1.println("Hello Rexus");
     e84:	60 e3       	ldi	r22, 0x30	; 48
     e86:	71 e0       	ldi	r23, 0x01	; 1
     e88:	82 e5       	ldi	r24, 0x52	; 82
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	0e 94 92 03 	call	0x724	; 0x724 <Print::println(char const*)>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:88
  
  pinMode(LO_Pin,INPUT);
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	84 e0       	ldi	r24, 0x04	; 4
     e94:	0e 94 0a 03 	call	0x614	; 0x614 <pinMode>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:89
  pinMode(SOE_Pin,INPUT);
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	83 e0       	ldi	r24, 0x03	; 3
     e9c:	0e 94 0a 03 	call	0x614	; 0x614 <pinMode>
     ea0:	04 e0       	ldi	r16, 0x04	; 4
     ea2:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:92

  for(int i=0; i<4; i++){
    digitalWrite(CAM_LED, HIGH);
     ea4:	61 e0       	ldi	r22, 0x01	; 1
     ea6:	86 e2       	ldi	r24, 0x26	; 38
     ea8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:93
    delay(500);
     eac:	64 ef       	ldi	r22, 0xF4	; 244
     eae:	71 e0       	ldi	r23, 0x01	; 1
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <delay>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:94
    digitalWrite(CAM_LED, LOW);
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	86 e2       	ldi	r24, 0x26	; 38
     ebc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:95
    delay(500);
     ec0:	64 ef       	ldi	r22, 0xF4	; 244
     ec2:	71 e0       	ldi	r23, 0x01	; 1
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 60 03 	call	0x6c0	; 0x6c0 <delay>
     ecc:	01 50       	subi	r16, 0x01	; 1
     ece:	11 09       	sbc	r17, r1
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:91
  Serial1.println("Hello Rexus");
  
  pinMode(LO_Pin,INPUT);
  pinMode(SOE_Pin,INPUT);

  for(int i=0; i<4; i++){
     ed0:	49 f7       	brne	.-46     	; 0xea4 <main+0x288>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:98
    delay(500);
    digitalWrite(CAM_LED, LOW);
    delay(500);
  }

  linearMotor.write(linearMotor_minPos);
     ed2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Servo::write(int) [clone .constprop.11]>
telemetryUpdate():
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:10
//
//  //Send new telemetry at 2 Hz
//  if(timeNow - lastTelemetrySent >= 500) {
//    lastTelemetrySent = timeNow;
//
    char telemetryMessage[15] = "\n";
     ed6:	1e 01       	movw	r2, r28
     ed8:	83 e0       	ldi	r24, 0x03	; 3
     eda:	28 0e       	add	r2, r24
     edc:	31 1c       	adc	r3, r1
     ede:	4e 01       	movw	r8, r28
     ee0:	9e e0       	ldi	r25, 0x0E	; 14
     ee2:	89 0e       	add	r8, r25
     ee4:	91 1c       	adc	r9, r1
millis():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     ee6:	2f b7       	in	r18, 0x3f	; 63
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     ee8:	f8 94       	cli
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     eea:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <timer0_millis>
     eee:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <timer0_millis+0x1>
     ef2:	a0 91 8e 02 	lds	r26, 0x028E	; 0x80028e <timer0_millis+0x2>
     ef6:	b0 91 8f 02 	lds	r27, 0x028F	; 0x80028f <timer0_millis+0x3>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     efa:	2f bf       	out	0x3f, r18	; 63
loop():
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:125
//  delayMicroseconds(100);
//  digitalWrite(STEP_DISK,LOW);
//  digitalWrite(STEP_FM,LOW);
//  delayMicroseconds(100);

ms = millis();
     efc:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <ms+0x1>
     f00:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <ms>
     f04:	f8 e4       	ldi	r31, 0x48	; 72
     f06:	af 2e       	mov	r10, r31
     f08:	f1 e0       	ldi	r31, 0x01	; 1
     f0a:	bf 2e       	mov	r11, r31
     f0c:	e4 e0       	ldi	r30, 0x04	; 4
     f0e:	f1 e0       	ldi	r31, 0x01	; 1
     f10:	f9 8b       	std	Y+17, r31	; 0x11
     f12:	e8 8b       	std	Y+16, r30	; 0x10
main():
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:127

  for (int i = 0; i < parallelStuff; i++)
     f14:	10 e0       	ldi	r17, 0x00	; 0
     f16:	00 e0       	ldi	r16, 0x00	; 0
loop():
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:129
  {
    if (previousMillis[i] + deltaMillis[i] >= ms)
     f18:	f5 01       	movw	r30, r10
     f1a:	81 91       	ld	r24, Z+
     f1c:	91 91       	ld	r25, Z+
     f1e:	5f 01       	movw	r10, r30
     f20:	e8 89       	ldd	r30, Y+16	; 0x10
     f22:	f9 89       	ldd	r31, Y+17	; 0x11
     f24:	21 91       	ld	r18, Z+
     f26:	31 91       	ld	r19, Z+
     f28:	f9 8b       	std	Y+17, r31	; 0x11
     f2a:	e8 8b       	std	Y+16, r30	; 0x10
     f2c:	82 0f       	add	r24, r18
     f2e:	93 1f       	adc	r25, r19
     f30:	20 91 b5 02 	lds	r18, 0x02B5	; 0x8002b5 <ms>
     f34:	30 91 b6 02 	lds	r19, 0x02B6	; 0x8002b6 <ms+0x1>
     f38:	82 17       	cp	r24, r18
     f3a:	93 07       	cpc	r25, r19
     f3c:	b4 f1       	brlt	.+108    	; 0xfaa <main+0x38e>
runTask():
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:144
//  //Serial.println(ms);
}

inline void runTask(int i)
{
  switch (i)
     f3e:	02 30       	cpi	r16, 0x02	; 2
     f40:	11 05       	cpc	r17, r1
     f42:	09 f4       	brne	.+2      	; 0xf46 <main+0x32a>
     f44:	af c0       	rjmp	.+350    	; 0x10a4 <main+0x488>
     f46:	0c f0       	brlt	.+2      	; 0xf4a <main+0x32e>
     f48:	3f c0       	rjmp	.+126    	; 0xfc8 <main+0x3ac>
     f4a:	01 30       	cpi	r16, 0x01	; 1
     f4c:	11 05       	cpc	r17, r1
     f4e:	09 f4       	brne	.+2      	; 0xf52 <main+0x336>
     f50:	53 c0       	rjmp	.+166    	; 0xff8 <main+0x3dc>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:148
  {
  case 0: // disk
    //digitalWrite(LED_BUILTIN,HIGH);
    if (currentStepsDisk < targetStepsDisk)
     f52:	e0 90 46 01 	lds	r14, 0x0146	; 0x800146 <currentStepsDisk>
     f56:	f0 90 47 01 	lds	r15, 0x0147	; 0x800147 <currentStepsDisk+0x1>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:150
      DISK_DIR_CW = true, digitalWrite(DIR_DISK, HIGH);
    else if (currentStepsDisk > targetStepsDisk)
     f5a:	e1 14       	cp	r14, r1
     f5c:	f1 04       	cpc	r15, r1
     f5e:	e9 f0       	breq	.+58     	; 0xf9a <main+0x37e>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:151
      DISK_DIR_CW = false, digitalWrite(DIR_DISK, LOW);
     f60:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <DISK_DIR_CW>
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	83 e1       	ldi	r24, 0x13	; 19
     f68:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:156
    if(targetStepsDisk != currentStepsDisk)
    {
      //digitalWrite(LED_BUILTIN,LOW);
      
      digitalWrite(STEP_DISK, LOW);
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	84 e1       	ldi	r24, 0x14	; 20
     f70:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:157
      delayMicroseconds(0.5 * STEP_PERIOD);
     f74:	0e 94 de 00 	call	0x1bc	; 0x1bc <delayMicroseconds.constprop.16>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:158
      digitalWrite(STEP_DISK, HIGH);
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	84 e1       	ldi	r24, 0x14	; 20
     f7c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:159
      delayMicroseconds(0.5 * STEP_PERIOD);
     f80:	0e 94 de 00 	call	0x1bc	; 0x1bc <delayMicroseconds.constprop.16>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:160
      digitalWrite(STEP_DISK, LOW);
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	84 e1       	ldi	r24, 0x14	; 20
     f88:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:164
      if (DISK_DIR_CW)
        currentStepsDisk++;
      else
        currentStepsDisk--;
     f8c:	f1 e0       	ldi	r31, 0x01	; 1
     f8e:	ef 1a       	sub	r14, r31
     f90:	f1 08       	sbc	r15, r1
     f92:	f0 92 47 01 	sts	0x0147, r15	; 0x800147 <currentStepsDisk+0x1>
     f96:	e0 92 46 01 	sts	0x0146, r14	; 0x800146 <currentStepsDisk>
loop():
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:132
  for (int i = 0; i < parallelStuff; i++)
  {
    if (previousMillis[i] + deltaMillis[i] >= ms)
    {
      runTask(i);
      previousMillis[i] = ms;
     f9a:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <ms>
     f9e:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <ms+0x1>
     fa2:	f5 01       	movw	r30, r10
     fa4:	32 97       	sbiw	r30, 0x02	; 2
     fa6:	91 83       	std	Z+1, r25	; 0x01
     fa8:	80 83       	st	Z, r24
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:127
//  digitalWrite(STEP_FM,LOW);
//  delayMicroseconds(100);

ms = millis();

  for (int i = 0; i < parallelStuff; i++)
     faa:	0f 5f       	subi	r16, 0xFF	; 255
     fac:	1f 4f       	sbci	r17, 0xFF	; 255
     fae:	05 30       	cpi	r16, 0x05	; 5
     fb0:	11 05       	cpc	r17, r1
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <main+0x39a>
     fb4:	b1 cf       	rjmp	.-158    	; 0xf18 <main+0x2fc>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:138
    }
  }
////  stateMachineUpdate();
//  targetStepsFM = 10000;
//  targetStepsDisk = 10000;
  delay(1);
     fb6:	61 e0       	ldi	r22, 0x01	; 1
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 60 03 	call	0x6c0	; 0x6c0 <delay>
main():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
     fc2:	0e 94 4d 02 	call	0x49a	; 0x49a <serialEventRun()>
     fc6:	8f cf       	rjmp	.-226    	; 0xee6 <main+0x2ca>
runTask():
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:144
//  //Serial.println(ms);
}

inline void runTask(int i)
{
  switch (i)
     fc8:	03 30       	cpi	r16, 0x03	; 3
     fca:	11 05       	cpc	r17, r1
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <main+0x3b4>
     fce:	90 c0       	rjmp	.+288    	; 0x10f0 <main+0x4d4>
     fd0:	04 30       	cpi	r16, 0x04	; 4
     fd2:	11 05       	cpc	r17, r1
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <main+0x3bc>
     fd6:	bd cf       	rjmp	.-134    	; 0xf52 <main+0x336>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:202
    telemetryUpdate();
  }
  break;
  case 4:
  {
    if(valoare_led) digitalWrite(CAM_LED,HIGH),valoare_led = 0;
     fd8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     fdc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     fe0:	89 2b       	or	r24, r25
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <main+0x3ca>
     fe4:	1c c1       	rjmp	.+568    	; 0x121e <main+0x602>
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	86 e2       	ldi	r24, 0x26	; 38
     fea:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
     fee:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ff2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     ff6:	d1 cf       	rjmp	.-94     	; 0xf9a <main+0x37e>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:168
      else
        currentStepsDisk--;
    }
    break;
  case 1: // temp
    digitalWrite(PWM_DC, LOW);
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	8e e0       	ldi	r24, 0x0E	; 14
     ffc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:170
    read_temp_allowed = 1;
    delay(100);
    1000:	64 e6       	ldi	r22, 0x64	; 100
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 60 03 	call	0x6c0	; 0x6c0 <delay>
analogRead():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    100c:	85 e4       	ldi	r24, 0x45	; 69
    100e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    1012:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1016:	80 64       	ori	r24, 0x40	; 64
    1018:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
    101c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1020:	86 fd       	sbrc	r24, 6
    1022:	fc cf       	rjmp	.-8      	; 0x101c <main+0x400>
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
    1024:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1028:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
calculateTemperature():
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/soldering.ino:4


float calculateTemperature() {
  float analogReadValue = abs(analogRead(TEMP_OUT));
    102c:	77 ff       	sbrs	r23, 7
    102e:	03 c0       	rjmp	.+6      	; 0x1036 <main+0x41a>
    1030:	71 95       	neg	r23
    1032:	61 95       	neg	r22
    1034:	71 09       	sbc	r23, r1
    1036:	07 2e       	mov	r0, r23
    1038:	00 0c       	add	r0, r0
    103a:	88 0b       	sbc	r24, r24
    103c:	99 0b       	sbc	r25, r25
    103e:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__floatsisf>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/soldering.ino:5
  int U = (analogReadValue * 3300.0) / 1023.0; // Convert analog reading to millivolts
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e4       	ldi	r19, 0x40	; 64
    1046:	4e e4       	ldi	r20, 0x4E	; 78
    1048:	55 e4       	ldi	r21, 0x45	; 69
    104a:	0e 94 18 0b 	call	0x1630	; 0x1630 <__mulsf3>
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 ec       	ldi	r19, 0xC0	; 192
    1052:	4f e7       	ldi	r20, 0x7F	; 127
    1054:	54 e4       	ldi	r21, 0x44	; 68
    1056:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__divsf3>
    105a:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixsfsi>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/soldering.ino:12
  double a1 = 0.507906896;
  double a2 = -0.00020687128;
  double a3 = 5.12766721e-08;
  
  // Compute the temperature T(U)
  float T1 = a0 + a1 * U + a2 * pow(U, 2) + a3 * pow(U, 3);
    105e:	07 2e       	mov	r0, r23
    1060:	00 0c       	add	r0, r0
    1062:	88 0b       	sbc	r24, r24
    1064:	99 0b       	sbc	r25, r25
    1066:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__floatsisf>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/soldering.ino:13
  float T2 = 0.63*U + 10;
    106a:	2e ea       	ldi	r18, 0xAE	; 174
    106c:	37 e4       	ldi	r19, 0x47	; 71
    106e:	41 e2       	ldi	r20, 0x21	; 33
    1070:	5f e3       	ldi	r21, 0x3F	; 63
    1072:	0e 94 18 0b 	call	0x1630	; 0x1630 <__mulsf3>
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e2       	ldi	r20, 0x20	; 32
    107c:	51 e4       	ldi	r21, 0x41	; 65
    107e:	0e 94 76 09 	call	0x12ec	; 0x12ec <__addsf3>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/soldering.ino:14
  currentTemperature = T2;
    1082:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__fixunssfsi>
    1086:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <currentTemperature+0x1>
    108a:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <currentTemperature>
runTask():
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:175
    calculateTemperature();
    if (currentTemperature < targetTemperature)
      digitalWrite(PWM_DC, HIGH),read_temp_allowed = 0;
    else
      digitalWrite(PWM_DC, LOW),read_temp_allowed = 1;
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	8e e0       	ldi	r24, 0x0E	; 14
    1092:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:176
    delay(100);
    1096:	64 e6       	ldi	r22, 0x64	; 100
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <delay>
    10a2:	7b cf       	rjmp	.-266    	; 0xf9a <main+0x37e>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:179
    break;
  case 2: // FM
    if (currentStepsFM < targetStepsFM)
    10a4:	e0 90 42 01 	lds	r14, 0x0142	; 0x800142 <currentStepsFM>
    10a8:	f0 90 43 01 	lds	r15, 0x0143	; 0x800143 <currentStepsFM+0x1>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:181
      FM_DIR_CW = true, digitalWrite(DIR_FM, HIGH);
    else if (currentStepsFM > targetStepsFM)
    10ac:	e1 14       	cp	r14, r1
    10ae:	f1 04       	cpc	r15, r1
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <main+0x498>
    10b2:	73 cf       	rjmp	.-282    	; 0xf9a <main+0x37e>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:182
      FM_DIR_CW = false, digitalWrite(DIR_FM, LOW);
    10b4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <FM_DIR_CW>
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	87 e1       	ldi	r24, 0x17	; 23
    10bc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:184
    if(targetStepsFM != currentStepsFM){
      digitalWrite(STEP_FM, LOW);
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	8c e1       	ldi	r24, 0x1C	; 28
    10c4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:185
      delayMicroseconds(0.5 * STEP_PERIOD);
    10c8:	0e 94 de 00 	call	0x1bc	; 0x1bc <delayMicroseconds.constprop.16>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:186
      digitalWrite(STEP_FM, HIGH);
    10cc:	61 e0       	ldi	r22, 0x01	; 1
    10ce:	8c e1       	ldi	r24, 0x1C	; 28
    10d0:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:187
      delayMicroseconds(0.5 * STEP_PERIOD);
    10d4:	0e 94 de 00 	call	0x1bc	; 0x1bc <delayMicroseconds.constprop.16>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:188
      digitalWrite(STEP_FM, LOW);
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	8c e1       	ldi	r24, 0x1C	; 28
    10dc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:192
      if (FM_DIR_CW)
        currentStepsFM++;
      else
        currentStepsFM--;
    10e0:	91 e0       	ldi	r25, 0x01	; 1
    10e2:	e9 1a       	sub	r14, r25
    10e4:	f1 08       	sbc	r15, r1
    10e6:	f0 92 43 01 	sts	0x0143, r15	; 0x800143 <currentStepsFM+0x1>
    10ea:	e0 92 42 01 	sts	0x0142, r14	; 0x800142 <currentStepsFM>
    10ee:	55 cf       	rjmp	.-342    	; 0xf9a <main+0x37e>
telemetryUpdate():
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:10
    10f0:	ea e0       	ldi	r30, 0x0A	; 10
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	fa 83       	std	Y+2, r31	; 0x02
    10f6:	e9 83       	std	Y+1, r30	; 0x01
    10f8:	f1 01       	movw	r30, r2
    10fa:	8d e0       	ldi	r24, 0x0D	; 13
    10fc:	11 92       	st	Z+, r1
    10fe:	8a 95       	dec	r24
    1100:	e9 f7       	brne	.-6      	; 0x10fc <main+0x4e0>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:13
    telemetryMessage[1] = targetTemperature & 0xFF;
    telemetryMessage[2] = (targetTemperature >> 8) & 0xFF;
    telemetryMessage[3] = currentTemperature & 0xFF;
    1102:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <currentTemperature>
    1106:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <currentTemperature+0x1>
    110a:	9c 83       	std	Y+4, r25	; 0x04
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:14
    telemetryMessage[4] = (currentTemperature >> 8) & 0xFF;
    110c:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:16
    
    uint16_t sampleDiscPosition = currentStepsDisk;
    110e:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <currentStepsDisk>
    1112:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <currentStepsDisk+0x1>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:17
    telemetryMessage[5] = currentStepsDisk & 0xFF;
    1116:	9e 83       	std	Y+6, r25	; 0x06
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:18
    telemetryMessage[6] = (currentStepsDisk >> 8) & 0xFF;
    1118:	8f 83       	std	Y+7, r24	; 0x07
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:20

    uint16_t feedingMechanismPosition = currentStepsFM;
    111a:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <currentStepsFM>
    111e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <currentStepsFM+0x1>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:21
    telemetryMessage[7] = feedingMechanismPosition & 0xFF;
    1122:	98 87       	std	Y+8, r25	; 0x08
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:22
    telemetryMessage[8] = (feedingMechanismPosition >> 8) & 0xFF;
    1124:	89 87       	std	Y+9, r24	; 0x09
read():
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:298
  }
}

int Servo::read() // return the value as degrees
{
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);
    1126:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <linearMotor+0x2>
    112a:	58 e5       	ldi	r21, 0x58	; 88
    112c:	c5 2e       	mov	r12, r21
    112e:	52 e0       	ldi	r21, 0x02	; 2
    1130:	d5 2e       	mov	r13, r21
    1132:	c8 1a       	sub	r12, r24
    1134:	d1 08       	sbc	r13, r1
    1136:	87 fd       	sbrc	r24, 7
    1138:	d3 94       	inc	r13
    113a:	cc 0c       	add	r12, r12
    113c:	dd 1c       	adc	r13, r13
    113e:	cc 0c       	add	r12, r12
    1140:	dd 1c       	adc	r13, r13
    1142:	0d 2c       	mov	r0, r13
    1144:	00 0c       	add	r0, r0
    1146:	ee 08       	sbc	r14, r14
    1148:	ff 08       	sbc	r15, r15
    114a:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <linearMotor+0x1>
    114e:	78 e8       	ldi	r23, 0x88	; 136
    1150:	47 2e       	mov	r4, r23
    1152:	51 2c       	mov	r5, r1
    1154:	48 1a       	sub	r4, r24
    1156:	51 08       	sbc	r5, r1
    1158:	87 fd       	sbrc	r24, 7
    115a:	53 94       	inc	r5
    115c:	44 0c       	add	r4, r4
    115e:	55 1c       	adc	r5, r5
    1160:	44 0c       	add	r4, r4
    1162:	55 1c       	adc	r5, r5
    1164:	05 2c       	mov	r0, r5
    1166:	00 0c       	add	r0, r0
    1168:	66 08       	sbc	r6, r6
    116a:	77 08       	sbc	r7, r7
readMicroseconds():
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:304
}

int Servo::readMicroseconds()
{
  unsigned int pulsewidth;
  if( this->servoIndex != INVALID_SERVO )
    116c:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <linearMotor>
    1170:	8f 3f       	cpi	r24, 0xFF	; 255
    1172:	09 f4       	brne	.+2      	; 0x1176 <main+0x55a>
    1174:	51 c0       	rjmp	.+162    	; 0x1218 <main+0x5fc>
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:305
    pulsewidth = ticksToUs(servos[this->servoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	fc 01       	movw	r30, r24
    117a:	ee 0f       	add	r30, r30
    117c:	ff 1f       	adc	r31, r31
    117e:	e8 0f       	add	r30, r24
    1180:	f9 1f       	adc	r31, r25
    1182:	e0 57       	subi	r30, 0x70	; 112
    1184:	fd 4f       	sbci	r31, 0xFD	; 253
    1186:	81 81       	ldd	r24, Z+1	; 0x01
    1188:	92 81       	ldd	r25, Z+2	; 0x02
    118a:	33 e0       	ldi	r19, 0x03	; 3
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	3a 95       	dec	r19
    1192:	e1 f7       	brne	.-8      	; 0x118c <main+0x570>
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	a0 e0       	ldi	r26, 0x00	; 0
    1198:	43 e0       	ldi	r20, 0x03	; 3
    119a:	b5 95       	asr	r27
    119c:	a7 95       	ror	r26
    119e:	97 95       	ror	r25
    11a0:	87 95       	ror	r24
    11a2:	4a 95       	dec	r20
    11a4:	d1 f7       	brne	.-12     	; 0x119a <main+0x57e>
    11a6:	02 96       	adiw	r24, 0x02	; 2
read():
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:298
  }
}

int Servo::read() // return the value as degrees
{
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);
    11a8:	9c 01       	movw	r18, r24
    11aa:	2f 5f       	subi	r18, 0xFF	; 255
    11ac:	3f 4f       	sbci	r19, 0xFF	; 255
    11ae:	03 2e       	mov	r0, r19
    11b0:	00 0c       	add	r0, r0
    11b2:	44 0b       	sbc	r20, r20
    11b4:	55 0b       	sbc	r21, r21
map():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/WMath.cpp:54
    11b6:	24 19       	sub	r18, r4
    11b8:	35 09       	sbc	r19, r5
    11ba:	46 09       	sbc	r20, r6
    11bc:	57 09       	sbc	r21, r7
    11be:	a4 eb       	ldi	r26, 0xB4	; 180
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	0e 94 39 09 	call	0x1272	; 0x1272 <__muluhisi3>
    11c6:	a7 01       	movw	r20, r14
    11c8:	96 01       	movw	r18, r12
    11ca:	24 19       	sub	r18, r4
    11cc:	35 09       	sbc	r19, r5
    11ce:	46 09       	sbc	r20, r6
    11d0:	57 09       	sbc	r21, r7
    11d2:	0e 94 1a 09 	call	0x1234	; 0x1234 <__divmodsi4>
telemetryUpdate():
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:25

    uint16_t linearMotorPosition = linearMotor.read();
    telemetryMessage[9] = linearMotorPosition & 0xFF;
    11d6:	2a 87       	std	Y+10, r18	; 0x0a
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:26
    telemetryMessage[10] = (linearMotorPosition >> 8) & 0xFF;
    11d8:	3b 87       	std	Y+11, r19	; 0x0b
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:29
  
    //Rexus signals (LO and SOE)
    telemetryMessage[11] = digitalRead(LO_Pin) + (digitalRead(SOE_Pin) << 1);
    11da:	84 e0       	ldi	r24, 0x04	; 4
    11dc:	0e 94 b3 02 	call	0x566	; 0x566 <digitalRead>
    11e0:	f8 2e       	mov	r15, r24
    11e2:	83 e0       	ldi	r24, 0x03	; 3
    11e4:	0e 94 b3 02 	call	0x566	; 0x566 <digitalRead>
    11e8:	88 0f       	add	r24, r24
    11ea:	f8 0e       	add	r15, r24
    11ec:	fc 86       	std	Y+12, r15	; 0x0c
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:32

    //Machine state
    telemetryMessage[12] = machineState;
    11ee:	1d 86       	std	Y+13, r1	; 0x0d
    11f0:	fe 01       	movw	r30, r28
    11f2:	32 96       	adiw	r30, 0x02	; 2
main():
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:35

    //calculate and add checksum
    uint8_t checksum = 0;
    11f4:	80 e0       	ldi	r24, 0x00	; 0
telemetryUpdate():
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:37
    for(int i = 1; i < 13; i++) {
      checksum ^= telemetryMessage[i];
    11f6:	91 91       	ld	r25, Z+
    11f8:	89 27       	eor	r24, r25
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:36
    //Machine state
    telemetryMessage[12] = machineState;

    //calculate and add checksum
    uint8_t checksum = 0;
    for(int i = 1; i < 13; i++) {
    11fa:	8e 16       	cp	r8, r30
    11fc:	9f 06       	cpc	r9, r31
    11fe:	d9 f7       	brne	.-10     	; 0x11f6 <main+0x5da>
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:39
      checksum ^= telemetryMessage[i];
    }
    telemetryMessage[13] = checksum;
    1200:	8e 87       	std	Y+14, r24	; 0x0e
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/telemetry.ino:42

    //Zero-ended string
    telemetryMessage[14] = 0;
    1202:	1f 86       	std	Y+15, r1	; 0x0f
write():
C:\Users\User\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:58
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    1204:	4f e0       	ldi	r20, 0x0F	; 15
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	be 01       	movw	r22, r28
    120a:	6f 5f       	subi	r22, 0xFF	; 255
    120c:	7f 4f       	sbci	r23, 0xFF	; 255
    120e:	82 e5       	ldi	r24, 0x52	; 82
    1210:	91 e0       	ldi	r25, 0x01	; 1
    1212:	0e 94 40 01 	call	0x280	; 0x280 <Print::write(unsigned char const*, unsigned int)>
    1216:	c1 ce       	rjmp	.-638    	; 0xf9a <main+0x37e>
main():
C:\Users\User\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:307
{
  unsigned int pulsewidth;
  if( this->servoIndex != INVALID_SERVO )
    pulsewidth = ticksToUs(servos[this->servoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009
  else
    pulsewidth  = 0;
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	c5 cf       	rjmp	.-118    	; 0x11a8 <main+0x58c>
runTask():
C:\Users\User\OneDrive\Desktop\SOLDERx\SOLDERx\Mainboard/Mainboard.ino:203
  }
  break;
  case 4:
  {
    if(valoare_led) digitalWrite(CAM_LED,HIGH),valoare_led = 0;
    else digitalWrite(CAM_LED,LOW), valoare_led = 1;
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	86 e2       	ldi	r24, 0x26	; 38
    1222:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
    1226:	e1 e0       	ldi	r30, 0x01	; 1
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	f0 93 01 01 	sts	0x0101, r31	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    122e:	e0 93 00 01 	sts	0x0100, r30	; 0x800100 <__DATA_REGION_ORIGIN__>
    1232:	b3 ce       	rjmp	.-666    	; 0xf9a <main+0x37e>

00001234 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    1234:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    1236:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    1238:	1e f4       	brtc	.+6      	; 0x1240 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    123a:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    123c:	0e 94 31 09 	call	0x1262	; 0x1262 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    1240:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    1242:	07 d0       	rcall	.+14     	; 0x1252 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    1244:	0e 94 44 09 	call	0x1288	; 0x1288 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    1248:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    124a:	03 d0       	rcall	.+6      	; 0x1252 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    124c:	4e f4       	brtc	.+18     	; 0x1260 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    124e:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__negsi2>

00001252 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    1252:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    1254:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    1256:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    1258:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    125c:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    125e:	5f 4f       	sbci	r21, 0xFF	; 255

00001260 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    1260:	08 95       	ret

00001262 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    1262:	90 95       	com	r25
    1264:	80 95       	com	r24
    1266:	70 95       	com	r23
    1268:	61 95       	neg	r22
    126a:	7f 4f       	sbci	r23, 0xFF	; 255
    126c:	8f 4f       	sbci	r24, 0xFF	; 255
    126e:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    1270:	08 95       	ret

00001272 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    1272:	0e 94 66 09 	call	0x12cc	; 0x12cc <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    1276:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    1278:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    127a:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    127c:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    127e:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    1280:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    1282:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    1284:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    1286:	08 95       	ret

00001288 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1288:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    128a:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    128c:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    128e:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1290:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1292:	0d c0       	rjmp	.+26     	; 0x12ae <__udivmodsi4_ep>

00001294 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1294:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1296:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1298:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    129a:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    129c:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    129e:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    12a0:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    12a2:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    12a4:	20 f0       	brcs	.+8      	; 0x12ae <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    12a6:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    12a8:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    12aa:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    12ac:	f5 0b       	sbc	r31, r21

000012ae <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    12ae:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    12b0:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    12b2:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    12b4:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    12b6:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    12b8:	69 f7       	brne	.-38     	; 0x1294 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    12ba:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    12bc:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    12be:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    12c0:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    12c2:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    12c4:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    12c6:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    12c8:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    12ca:	08 95       	ret

000012cc <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    12cc:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    12ce:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    12d0:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    12d2:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    12d4:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    12d6:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    12d8:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    12da:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    12dc:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    12de:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    12e0:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    12e2:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    12e4:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    12e6:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    12e8:	08 95       	ret

000012ea <__subsf3>:
__subsf3():
    12ea:	50 58       	subi	r21, 0x80	; 128

000012ec <__addsf3>:
    12ec:	bb 27       	eor	r27, r27
    12ee:	aa 27       	eor	r26, r26
    12f0:	0e 94 8d 09 	call	0x131a	; 0x131a <__addsf3x>
    12f4:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__fp_round>
__addsf3():
    12f8:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__fp_pscA>
    12fc:	38 f0       	brcs	.+14     	; 0x130c <__addsf3+0x20>
    12fe:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__fp_pscB>
    1302:	20 f0       	brcs	.+8      	; 0x130c <__addsf3+0x20>
    1304:	39 f4       	brne	.+14     	; 0x1314 <__addsf3+0x28>
    1306:	9f 3f       	cpi	r25, 0xFF	; 255
    1308:	19 f4       	brne	.+6      	; 0x1310 <__addsf3+0x24>
    130a:	26 f4       	brtc	.+8      	; 0x1314 <__addsf3+0x28>
    130c:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__fp_nan>
    1310:	0e f4       	brtc	.+2      	; 0x1314 <__addsf3+0x28>
    1312:	e0 95       	com	r30
    1314:	e7 fb       	bst	r30, 7
    1316:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <__fp_inf>

0000131a <__addsf3x>:
__addsf3x():
    131a:	e9 2f       	mov	r30, r25
    131c:	0e 94 ef 0a 	call	0x15de	; 0x15de <__fp_split3>
    1320:	58 f3       	brcs	.-42     	; 0x12f8 <__addsf3+0xc>
    1322:	ba 17       	cp	r27, r26
    1324:	62 07       	cpc	r22, r18
    1326:	73 07       	cpc	r23, r19
    1328:	84 07       	cpc	r24, r20
    132a:	95 07       	cpc	r25, r21
    132c:	20 f0       	brcs	.+8      	; 0x1336 <__addsf3x+0x1c>
    132e:	79 f4       	brne	.+30     	; 0x134e <__addsf3x+0x34>
    1330:	a6 f5       	brtc	.+104    	; 0x139a <__addsf3x+0x80>
    1332:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <__fp_zero>
    1336:	0e f4       	brtc	.+2      	; 0x133a <__addsf3x+0x20>
    1338:	e0 95       	com	r30
    133a:	0b 2e       	mov	r0, r27
    133c:	ba 2f       	mov	r27, r26
    133e:	a0 2d       	mov	r26, r0
    1340:	0b 01       	movw	r0, r22
    1342:	b9 01       	movw	r22, r18
    1344:	90 01       	movw	r18, r0
    1346:	0c 01       	movw	r0, r24
    1348:	ca 01       	movw	r24, r20
    134a:	a0 01       	movw	r20, r0
    134c:	11 24       	eor	r1, r1
    134e:	ff 27       	eor	r31, r31
    1350:	59 1b       	sub	r21, r25
    1352:	99 f0       	breq	.+38     	; 0x137a <__addsf3x+0x60>
    1354:	59 3f       	cpi	r21, 0xF9	; 249
    1356:	50 f4       	brcc	.+20     	; 0x136c <__addsf3x+0x52>
    1358:	50 3e       	cpi	r21, 0xE0	; 224
    135a:	68 f1       	brcs	.+90     	; 0x13b6 <__addsf3x+0x9c>
    135c:	1a 16       	cp	r1, r26
    135e:	f0 40       	sbci	r31, 0x00	; 0
    1360:	a2 2f       	mov	r26, r18
    1362:	23 2f       	mov	r18, r19
    1364:	34 2f       	mov	r19, r20
    1366:	44 27       	eor	r20, r20
    1368:	58 5f       	subi	r21, 0xF8	; 248
    136a:	f3 cf       	rjmp	.-26     	; 0x1352 <__addsf3x+0x38>
    136c:	46 95       	lsr	r20
    136e:	37 95       	ror	r19
    1370:	27 95       	ror	r18
    1372:	a7 95       	ror	r26
    1374:	f0 40       	sbci	r31, 0x00	; 0
    1376:	53 95       	inc	r21
    1378:	c9 f7       	brne	.-14     	; 0x136c <__addsf3x+0x52>
    137a:	7e f4       	brtc	.+30     	; 0x139a <__addsf3x+0x80>
    137c:	1f 16       	cp	r1, r31
    137e:	ba 0b       	sbc	r27, r26
    1380:	62 0b       	sbc	r22, r18
    1382:	73 0b       	sbc	r23, r19
    1384:	84 0b       	sbc	r24, r20
    1386:	ba f0       	brmi	.+46     	; 0x13b6 <__addsf3x+0x9c>
    1388:	91 50       	subi	r25, 0x01	; 1
    138a:	a1 f0       	breq	.+40     	; 0x13b4 <__addsf3x+0x9a>
    138c:	ff 0f       	add	r31, r31
    138e:	bb 1f       	adc	r27, r27
    1390:	66 1f       	adc	r22, r22
    1392:	77 1f       	adc	r23, r23
    1394:	88 1f       	adc	r24, r24
    1396:	c2 f7       	brpl	.-16     	; 0x1388 <__addsf3x+0x6e>
    1398:	0e c0       	rjmp	.+28     	; 0x13b6 <__addsf3x+0x9c>
    139a:	ba 0f       	add	r27, r26
    139c:	62 1f       	adc	r22, r18
    139e:	73 1f       	adc	r23, r19
    13a0:	84 1f       	adc	r24, r20
    13a2:	48 f4       	brcc	.+18     	; 0x13b6 <__addsf3x+0x9c>
    13a4:	87 95       	ror	r24
    13a6:	77 95       	ror	r23
    13a8:	67 95       	ror	r22
    13aa:	b7 95       	ror	r27
    13ac:	f7 95       	ror	r31
    13ae:	9e 3f       	cpi	r25, 0xFE	; 254
    13b0:	08 f0       	brcs	.+2      	; 0x13b4 <__addsf3x+0x9a>
    13b2:	b0 cf       	rjmp	.-160    	; 0x1314 <__addsf3+0x28>
    13b4:	93 95       	inc	r25
    13b6:	88 0f       	add	r24, r24
    13b8:	08 f0       	brcs	.+2      	; 0x13bc <__addsf3x+0xa2>
    13ba:	99 27       	eor	r25, r25
    13bc:	ee 0f       	add	r30, r30
    13be:	97 95       	ror	r25
    13c0:	87 95       	ror	r24
    13c2:	08 95       	ret

000013c4 <__divsf3>:
    13c4:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__divsf3x>
    13c8:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__fp_round>
    13cc:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__fp_pscB>
    13d0:	58 f0       	brcs	.+22     	; 0x13e8 <__divsf3+0x24>
    13d2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__fp_pscA>
    13d6:	40 f0       	brcs	.+16     	; 0x13e8 <__divsf3+0x24>
    13d8:	29 f4       	brne	.+10     	; 0x13e4 <__divsf3+0x20>
    13da:	5f 3f       	cpi	r21, 0xFF	; 255
    13dc:	29 f0       	breq	.+10     	; 0x13e8 <__divsf3+0x24>
    13de:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <__fp_inf>
    13e2:	51 11       	cpse	r21, r1
    13e4:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__fp_szero>
__divsf3():
    13e8:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__fp_nan>

000013ec <__divsf3x>:
__divsf3x():
    13ec:	0e 94 ef 0a 	call	0x15de	; 0x15de <__fp_split3>
    13f0:	68 f3       	brcs	.-38     	; 0x13cc <__divsf3+0x8>

000013f2 <__divsf3_pse>:
    13f2:	99 23       	and	r25, r25
    13f4:	b1 f3       	breq	.-20     	; 0x13e2 <__divsf3+0x1e>
    13f6:	55 23       	and	r21, r21
    13f8:	91 f3       	breq	.-28     	; 0x13de <__divsf3+0x1a>
    13fa:	95 1b       	sub	r25, r21
    13fc:	55 0b       	sbc	r21, r21
    13fe:	bb 27       	eor	r27, r27
    1400:	aa 27       	eor	r26, r26
    1402:	62 17       	cp	r22, r18
    1404:	73 07       	cpc	r23, r19
    1406:	84 07       	cpc	r24, r20
    1408:	38 f0       	brcs	.+14     	; 0x1418 <__divsf3_pse+0x26>
    140a:	9f 5f       	subi	r25, 0xFF	; 255
    140c:	5f 4f       	sbci	r21, 0xFF	; 255
    140e:	22 0f       	add	r18, r18
    1410:	33 1f       	adc	r19, r19
    1412:	44 1f       	adc	r20, r20
    1414:	aa 1f       	adc	r26, r26
    1416:	a9 f3       	breq	.-22     	; 0x1402 <__divsf3_pse+0x10>
    1418:	35 d0       	rcall	.+106    	; 0x1484 <__divsf3_pse+0x92>
    141a:	0e 2e       	mov	r0, r30
    141c:	3a f0       	brmi	.+14     	; 0x142c <__divsf3_pse+0x3a>
    141e:	e0 e8       	ldi	r30, 0x80	; 128
    1420:	32 d0       	rcall	.+100    	; 0x1486 <__divsf3_pse+0x94>
    1422:	91 50       	subi	r25, 0x01	; 1
    1424:	50 40       	sbci	r21, 0x00	; 0
    1426:	e6 95       	lsr	r30
    1428:	00 1c       	adc	r0, r0
    142a:	ca f7       	brpl	.-14     	; 0x141e <__divsf3_pse+0x2c>
    142c:	2b d0       	rcall	.+86     	; 0x1484 <__divsf3_pse+0x92>
    142e:	fe 2f       	mov	r31, r30
    1430:	29 d0       	rcall	.+82     	; 0x1484 <__divsf3_pse+0x92>
    1432:	66 0f       	add	r22, r22
    1434:	77 1f       	adc	r23, r23
    1436:	88 1f       	adc	r24, r24
    1438:	bb 1f       	adc	r27, r27
    143a:	26 17       	cp	r18, r22
    143c:	37 07       	cpc	r19, r23
    143e:	48 07       	cpc	r20, r24
    1440:	ab 07       	cpc	r26, r27
    1442:	b0 e8       	ldi	r27, 0x80	; 128
    1444:	09 f0       	breq	.+2      	; 0x1448 <__divsf3_pse+0x56>
    1446:	bb 0b       	sbc	r27, r27
    1448:	80 2d       	mov	r24, r0
    144a:	bf 01       	movw	r22, r30
    144c:	ff 27       	eor	r31, r31
    144e:	93 58       	subi	r25, 0x83	; 131
    1450:	5f 4f       	sbci	r21, 0xFF	; 255
    1452:	3a f0       	brmi	.+14     	; 0x1462 <__divsf3_pse+0x70>
    1454:	9e 3f       	cpi	r25, 0xFE	; 254
    1456:	51 05       	cpc	r21, r1
    1458:	78 f0       	brcs	.+30     	; 0x1478 <__divsf3_pse+0x86>
    145a:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <__fp_inf>
    145e:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__fp_szero>
    1462:	5f 3f       	cpi	r21, 0xFF	; 255
    1464:	e4 f3       	brlt	.-8      	; 0x145e <__divsf3_pse+0x6c>
    1466:	98 3e       	cpi	r25, 0xE8	; 232
    1468:	d4 f3       	brlt	.-12     	; 0x145e <__divsf3_pse+0x6c>
    146a:	86 95       	lsr	r24
    146c:	77 95       	ror	r23
    146e:	67 95       	ror	r22
    1470:	b7 95       	ror	r27
    1472:	f7 95       	ror	r31
    1474:	9f 5f       	subi	r25, 0xFF	; 255
    1476:	c9 f7       	brne	.-14     	; 0x146a <__divsf3_pse+0x78>
    1478:	88 0f       	add	r24, r24
    147a:	91 1d       	adc	r25, r1
    147c:	96 95       	lsr	r25
    147e:	87 95       	ror	r24
    1480:	97 f9       	bld	r25, 7
    1482:	08 95       	ret
    1484:	e1 e0       	ldi	r30, 0x01	; 1
    1486:	66 0f       	add	r22, r22
    1488:	77 1f       	adc	r23, r23
    148a:	88 1f       	adc	r24, r24
    148c:	bb 1f       	adc	r27, r27
    148e:	62 17       	cp	r22, r18
    1490:	73 07       	cpc	r23, r19
    1492:	84 07       	cpc	r24, r20
    1494:	ba 07       	cpc	r27, r26
    1496:	20 f0       	brcs	.+8      	; 0x14a0 <__divsf3_pse+0xae>
    1498:	62 1b       	sub	r22, r18
    149a:	73 0b       	sbc	r23, r19
    149c:	84 0b       	sbc	r24, r20
    149e:	ba 0b       	sbc	r27, r26
    14a0:	ee 1f       	adc	r30, r30
    14a2:	88 f7       	brcc	.-30     	; 0x1486 <__divsf3_pse+0x94>
    14a4:	e0 95       	com	r30
    14a6:	08 95       	ret

000014a8 <__fixsfsi>:
    14a8:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__fixunssfsi>
    14ac:	68 94       	set
    14ae:	b1 11       	cpse	r27, r1
    14b0:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__fp_szero>
    14b4:	08 95       	ret

000014b6 <__fixunssfsi>:
    14b6:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__fp_splitA>
    14ba:	88 f0       	brcs	.+34     	; 0x14de <__fixunssfsi+0x28>
    14bc:	9f 57       	subi	r25, 0x7F	; 127
    14be:	98 f0       	brcs	.+38     	; 0x14e6 <__fixunssfsi+0x30>
    14c0:	b9 2f       	mov	r27, r25
    14c2:	99 27       	eor	r25, r25
    14c4:	b7 51       	subi	r27, 0x17	; 23
    14c6:	b0 f0       	brcs	.+44     	; 0x14f4 <__fixunssfsi+0x3e>
__fixunssfsi():
    14c8:	e1 f0       	breq	.+56     	; 0x1502 <__fixunssfsi+0x4c>
    14ca:	66 0f       	add	r22, r22
    14cc:	77 1f       	adc	r23, r23
    14ce:	88 1f       	adc	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	1a f0       	brmi	.+6      	; 0x14da <__fixunssfsi+0x24>
    14d4:	ba 95       	dec	r27
    14d6:	c9 f7       	brne	.-14     	; 0x14ca <__fixunssfsi+0x14>
    14d8:	14 c0       	rjmp	.+40     	; 0x1502 <__fixunssfsi+0x4c>
    14da:	b1 30       	cpi	r27, 0x01	; 1
    14dc:	91 f0       	breq	.+36     	; 0x1502 <__fixunssfsi+0x4c>
    14de:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fp_zero>
    14e2:	b1 e0       	ldi	r27, 0x01	; 1
    14e4:	08 95       	ret
    14e6:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <__fp_zero>
    14ea:	67 2f       	mov	r22, r23
    14ec:	78 2f       	mov	r23, r24
    14ee:	88 27       	eor	r24, r24
    14f0:	b8 5f       	subi	r27, 0xF8	; 248
    14f2:	39 f0       	breq	.+14     	; 0x1502 <__fixunssfsi+0x4c>
    14f4:	b9 3f       	cpi	r27, 0xF9	; 249
    14f6:	cc f3       	brlt	.-14     	; 0x14ea <__fixunssfsi+0x34>
    14f8:	86 95       	lsr	r24
    14fa:	77 95       	ror	r23
    14fc:	67 95       	ror	r22
    14fe:	b3 95       	inc	r27
    1500:	d9 f7       	brne	.-10     	; 0x14f8 <__fixunssfsi+0x42>
    1502:	3e f4       	brtc	.+14     	; 0x1512 <__fixunssfsi+0x5c>
    1504:	90 95       	com	r25
    1506:	80 95       	com	r24
    1508:	70 95       	com	r23
    150a:	61 95       	neg	r22
    150c:	7f 4f       	sbci	r23, 0xFF	; 255
    150e:	8f 4f       	sbci	r24, 0xFF	; 255
    1510:	9f 4f       	sbci	r25, 0xFF	; 255
    1512:	08 95       	ret

00001514 <__floatunsisf>:
__floatunsisf():
    1514:	e8 94       	clt
    1516:	09 c0       	rjmp	.+18     	; 0x152a <__floatsisf+0x12>

00001518 <__floatsisf>:
    1518:	97 fb       	bst	r25, 7
    151a:	3e f4       	brtc	.+14     	; 0x152a <__floatsisf+0x12>
    151c:	90 95       	com	r25
    151e:	80 95       	com	r24
    1520:	70 95       	com	r23
    1522:	61 95       	neg	r22
    1524:	7f 4f       	sbci	r23, 0xFF	; 255
    1526:	8f 4f       	sbci	r24, 0xFF	; 255
    1528:	9f 4f       	sbci	r25, 0xFF	; 255
    152a:	99 23       	and	r25, r25
    152c:	a9 f0       	breq	.+42     	; 0x1558 <__floatsisf+0x40>
    152e:	f9 2f       	mov	r31, r25
    1530:	96 e9       	ldi	r25, 0x96	; 150
    1532:	bb 27       	eor	r27, r27
    1534:	93 95       	inc	r25
    1536:	f6 95       	lsr	r31
    1538:	87 95       	ror	r24
    153a:	77 95       	ror	r23
    153c:	67 95       	ror	r22
    153e:	b7 95       	ror	r27
    1540:	f1 11       	cpse	r31, r1
    1542:	f8 cf       	rjmp	.-16     	; 0x1534 <__floatsisf+0x1c>
    1544:	fa f4       	brpl	.+62     	; 0x1584 <__floatsisf+0x6c>
    1546:	bb 0f       	add	r27, r27
    1548:	11 f4       	brne	.+4      	; 0x154e <__floatsisf+0x36>
    154a:	60 ff       	sbrs	r22, 0
    154c:	1b c0       	rjmp	.+54     	; 0x1584 <__floatsisf+0x6c>
    154e:	6f 5f       	subi	r22, 0xFF	; 255
    1550:	7f 4f       	sbci	r23, 0xFF	; 255
    1552:	8f 4f       	sbci	r24, 0xFF	; 255
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	16 c0       	rjmp	.+44     	; 0x1584 <__floatsisf+0x6c>
    1558:	88 23       	and	r24, r24
    155a:	11 f0       	breq	.+4      	; 0x1560 <__floatsisf+0x48>
    155c:	96 e9       	ldi	r25, 0x96	; 150
    155e:	11 c0       	rjmp	.+34     	; 0x1582 <__floatsisf+0x6a>
    1560:	77 23       	and	r23, r23
    1562:	21 f0       	breq	.+8      	; 0x156c <__floatsisf+0x54>
    1564:	9e e8       	ldi	r25, 0x8E	; 142
    1566:	87 2f       	mov	r24, r23
    1568:	76 2f       	mov	r23, r22
    156a:	05 c0       	rjmp	.+10     	; 0x1576 <__floatsisf+0x5e>
    156c:	66 23       	and	r22, r22
    156e:	71 f0       	breq	.+28     	; 0x158c <__floatsisf+0x74>
    1570:	96 e8       	ldi	r25, 0x86	; 134
    1572:	86 2f       	mov	r24, r22
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	2a f0       	brmi	.+10     	; 0x1584 <__floatsisf+0x6c>
    157a:	9a 95       	dec	r25
    157c:	66 0f       	add	r22, r22
    157e:	77 1f       	adc	r23, r23
    1580:	88 1f       	adc	r24, r24
    1582:	da f7       	brpl	.-10     	; 0x157a <__floatsisf+0x62>
    1584:	88 0f       	add	r24, r24
    1586:	96 95       	lsr	r25
    1588:	87 95       	ror	r24
    158a:	97 f9       	bld	r25, 7
    158c:	08 95       	ret

0000158e <__fp_inf>:
__fp_inf():
    158e:	97 f9       	bld	r25, 7
    1590:	9f 67       	ori	r25, 0x7F	; 127
    1592:	80 e8       	ldi	r24, 0x80	; 128
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	08 95       	ret

0000159a <__fp_nan>:
__fp_nan():
    159a:	9f ef       	ldi	r25, 0xFF	; 255
    159c:	80 ec       	ldi	r24, 0xC0	; 192
    159e:	08 95       	ret

000015a0 <__fp_pscA>:
__fp_pscA():
    15a0:	00 24       	eor	r0, r0
    15a2:	0a 94       	dec	r0
    15a4:	16 16       	cp	r1, r22
    15a6:	17 06       	cpc	r1, r23
    15a8:	18 06       	cpc	r1, r24
    15aa:	09 06       	cpc	r0, r25
    15ac:	08 95       	ret

000015ae <__fp_pscB>:
__fp_pscB():
    15ae:	00 24       	eor	r0, r0
    15b0:	0a 94       	dec	r0
    15b2:	12 16       	cp	r1, r18
    15b4:	13 06       	cpc	r1, r19
    15b6:	14 06       	cpc	r1, r20
    15b8:	05 06       	cpc	r0, r21
    15ba:	08 95       	ret

000015bc <__fp_round>:
__fp_round():
    15bc:	09 2e       	mov	r0, r25
    15be:	03 94       	inc	r0
    15c0:	00 0c       	add	r0, r0
    15c2:	11 f4       	brne	.+4      	; 0x15c8 <__fp_round+0xc>
    15c4:	88 23       	and	r24, r24
    15c6:	52 f0       	brmi	.+20     	; 0x15dc <__fp_round+0x20>
    15c8:	bb 0f       	add	r27, r27
    15ca:	40 f4       	brcc	.+16     	; 0x15dc <__fp_round+0x20>
    15cc:	bf 2b       	or	r27, r31
    15ce:	11 f4       	brne	.+4      	; 0x15d4 <__fp_round+0x18>
    15d0:	60 ff       	sbrs	r22, 0
    15d2:	04 c0       	rjmp	.+8      	; 0x15dc <__fp_round+0x20>
    15d4:	6f 5f       	subi	r22, 0xFF	; 255
    15d6:	7f 4f       	sbci	r23, 0xFF	; 255
    15d8:	8f 4f       	sbci	r24, 0xFF	; 255
    15da:	9f 4f       	sbci	r25, 0xFF	; 255
    15dc:	08 95       	ret

000015de <__fp_split3>:
__fp_split3():
    15de:	57 fd       	sbrc	r21, 7
    15e0:	90 58       	subi	r25, 0x80	; 128
    15e2:	44 0f       	add	r20, r20
    15e4:	55 1f       	adc	r21, r21
    15e6:	59 f0       	breq	.+22     	; 0x15fe <__fp_splitA+0x10>
    15e8:	5f 3f       	cpi	r21, 0xFF	; 255
    15ea:	71 f0       	breq	.+28     	; 0x1608 <__fp_splitA+0x1a>
    15ec:	47 95       	ror	r20

000015ee <__fp_splitA>:
    15ee:	88 0f       	add	r24, r24
    15f0:	97 fb       	bst	r25, 7
    15f2:	99 1f       	adc	r25, r25
    15f4:	61 f0       	breq	.+24     	; 0x160e <__fp_splitA+0x20>
    15f6:	9f 3f       	cpi	r25, 0xFF	; 255
    15f8:	79 f0       	breq	.+30     	; 0x1618 <__fp_splitA+0x2a>
    15fa:	87 95       	ror	r24
    15fc:	08 95       	ret
    15fe:	12 16       	cp	r1, r18
    1600:	13 06       	cpc	r1, r19
    1602:	14 06       	cpc	r1, r20
    1604:	55 1f       	adc	r21, r21
    1606:	f2 cf       	rjmp	.-28     	; 0x15ec <__fp_split3+0xe>
    1608:	46 95       	lsr	r20
    160a:	f1 df       	rcall	.-30     	; 0x15ee <__fp_splitA>
    160c:	08 c0       	rjmp	.+16     	; 0x161e <__fp_splitA+0x30>
    160e:	16 16       	cp	r1, r22
    1610:	17 06       	cpc	r1, r23
    1612:	18 06       	cpc	r1, r24
    1614:	99 1f       	adc	r25, r25
    1616:	f1 cf       	rjmp	.-30     	; 0x15fa <__fp_splitA+0xc>
    1618:	86 95       	lsr	r24
    161a:	71 05       	cpc	r23, r1
    161c:	61 05       	cpc	r22, r1
    161e:	08 94       	sec
    1620:	08 95       	ret

00001622 <__fp_zero>:
__fp_zero():
    1622:	e8 94       	clt

00001624 <__fp_szero>:
    1624:	bb 27       	eor	r27, r27
    1626:	66 27       	eor	r22, r22
    1628:	77 27       	eor	r23, r23
    162a:	cb 01       	movw	r24, r22
    162c:	97 f9       	bld	r25, 7
    162e:	08 95       	ret

00001630 <__mulsf3>:
__mulsf3():
    1630:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__mulsf3x>
    1634:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__fp_round>
    1638:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__fp_pscA>
    163c:	38 f0       	brcs	.+14     	; 0x164c <__mulsf3+0x1c>
    163e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__fp_pscB>
    1642:	20 f0       	brcs	.+8      	; 0x164c <__mulsf3+0x1c>
    1644:	95 23       	and	r25, r21
    1646:	11 f0       	breq	.+4      	; 0x164c <__mulsf3+0x1c>
    1648:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <__fp_inf>
    164c:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__fp_nan>
    1650:	11 24       	eor	r1, r1
    1652:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__fp_szero>

00001656 <__mulsf3x>:
__mulsf3x():
    1656:	0e 94 ef 0a 	call	0x15de	; 0x15de <__fp_split3>
    165a:	70 f3       	brcs	.-36     	; 0x1638 <__mulsf3+0x8>

0000165c <__mulsf3_pse>:
    165c:	95 9f       	mul	r25, r21
    165e:	c1 f3       	breq	.-16     	; 0x1650 <__mulsf3+0x20>
    1660:	95 0f       	add	r25, r21
    1662:	50 e0       	ldi	r21, 0x00	; 0
    1664:	55 1f       	adc	r21, r21
    1666:	62 9f       	mul	r22, r18
    1668:	f0 01       	movw	r30, r0
    166a:	72 9f       	mul	r23, r18
    166c:	bb 27       	eor	r27, r27
    166e:	f0 0d       	add	r31, r0
    1670:	b1 1d       	adc	r27, r1
    1672:	63 9f       	mul	r22, r19
    1674:	aa 27       	eor	r26, r26
    1676:	f0 0d       	add	r31, r0
    1678:	b1 1d       	adc	r27, r1
    167a:	aa 1f       	adc	r26, r26
    167c:	64 9f       	mul	r22, r20
    167e:	66 27       	eor	r22, r22
    1680:	b0 0d       	add	r27, r0
    1682:	a1 1d       	adc	r26, r1
    1684:	66 1f       	adc	r22, r22
    1686:	82 9f       	mul	r24, r18
    1688:	22 27       	eor	r18, r18
    168a:	b0 0d       	add	r27, r0
    168c:	a1 1d       	adc	r26, r1
    168e:	62 1f       	adc	r22, r18
    1690:	73 9f       	mul	r23, r19
    1692:	b0 0d       	add	r27, r0
    1694:	a1 1d       	adc	r26, r1
    1696:	62 1f       	adc	r22, r18
    1698:	83 9f       	mul	r24, r19
    169a:	a0 0d       	add	r26, r0
    169c:	61 1d       	adc	r22, r1
    169e:	22 1f       	adc	r18, r18
    16a0:	74 9f       	mul	r23, r20
    16a2:	33 27       	eor	r19, r19
    16a4:	a0 0d       	add	r26, r0
    16a6:	61 1d       	adc	r22, r1
    16a8:	23 1f       	adc	r18, r19
    16aa:	84 9f       	mul	r24, r20
    16ac:	60 0d       	add	r22, r0
    16ae:	21 1d       	adc	r18, r1
    16b0:	82 2f       	mov	r24, r18
    16b2:	76 2f       	mov	r23, r22
    16b4:	6a 2f       	mov	r22, r26
    16b6:	11 24       	eor	r1, r1
    16b8:	9f 57       	subi	r25, 0x7F	; 127
    16ba:	50 40       	sbci	r21, 0x00	; 0
    16bc:	9a f0       	brmi	.+38     	; 0x16e4 <__mulsf3_pse+0x88>
    16be:	f1 f0       	breq	.+60     	; 0x16fc <__mulsf3_pse+0xa0>
    16c0:	88 23       	and	r24, r24
    16c2:	4a f0       	brmi	.+18     	; 0x16d6 <__mulsf3_pse+0x7a>
    16c4:	ee 0f       	add	r30, r30
    16c6:	ff 1f       	adc	r31, r31
    16c8:	bb 1f       	adc	r27, r27
    16ca:	66 1f       	adc	r22, r22
    16cc:	77 1f       	adc	r23, r23
    16ce:	88 1f       	adc	r24, r24
    16d0:	91 50       	subi	r25, 0x01	; 1
    16d2:	50 40       	sbci	r21, 0x00	; 0
    16d4:	a9 f7       	brne	.-22     	; 0x16c0 <__mulsf3_pse+0x64>
    16d6:	9e 3f       	cpi	r25, 0xFE	; 254
    16d8:	51 05       	cpc	r21, r1
    16da:	80 f0       	brcs	.+32     	; 0x16fc <__mulsf3_pse+0xa0>
    16dc:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <__fp_inf>
    16e0:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__fp_szero>
    16e4:	5f 3f       	cpi	r21, 0xFF	; 255
    16e6:	e4 f3       	brlt	.-8      	; 0x16e0 <__mulsf3_pse+0x84>
    16e8:	98 3e       	cpi	r25, 0xE8	; 232
    16ea:	d4 f3       	brlt	.-12     	; 0x16e0 <__mulsf3_pse+0x84>
    16ec:	86 95       	lsr	r24
    16ee:	77 95       	ror	r23
    16f0:	67 95       	ror	r22
    16f2:	b7 95       	ror	r27
    16f4:	f7 95       	ror	r31
    16f6:	e7 95       	ror	r30
    16f8:	9f 5f       	subi	r25, 0xFF	; 255
    16fa:	c1 f7       	brne	.-16     	; 0x16ec <__mulsf3_pse+0x90>
    16fc:	fe 2b       	or	r31, r30
    16fe:	88 0f       	add	r24, r24
    1700:	91 1d       	adc	r25, r1
    1702:	96 95       	lsr	r25
    1704:	87 95       	ror	r24
    1706:	97 f9       	bld	r25, 7
    1708:	08 95       	ret

0000170a <__udivmodqi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    170a:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    170c:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    170e:	04 c0       	rjmp	.+8      	; 0x1718 <__udivmodqi4_ep>

00001710 <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    1710:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    1712:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    1714:	08 f0       	brcs	.+2      	; 0x1718 <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    1716:	96 1b       	sub	r25, r22

00001718 <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    1718:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    171a:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    171c:	c9 f7       	brne	.-14     	; 0x1710 <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    171e:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    1720:	08 95       	ret

00001722 <__tablejump2__>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1722:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1724:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1726:	05 90       	lpm	r0, Z+
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1728:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    172a:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    172c:	09 94       	ijmp

0000172e <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    172e:	f8 94       	cli

00001730 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1730:	ff cf       	rjmp	.-2      	; 0x1730 <__stop_program>
